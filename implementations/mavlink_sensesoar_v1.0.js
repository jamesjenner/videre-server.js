/*
MAVLink protocol implementation for node.js (auto-generated by mavgen_javascript.py)

Generated from: sensesoar.xml,common.xml

Note: this file has been auto-generated. DO NOT EDIT
*/

jspack = require("../lib/node-jspack-master/jspack.js").jspack,
    mavutil = require("../lib/mavutil.js"),
    _ = require("underscore"),
    events = require("events"),
    util = require("util");

// Add a convenience method to Buffer
Buffer.prototype.toByteArray = function () {
  return Array.prototype.slice.call(this, 0)
}

mavlink = function(){};

mavlink.WIRE_PROTOCOL_VERSION = "1.0";

mavlink.MAVLINK_TYPE_CHAR     = 0
mavlink.MAVLINK_TYPE_UINT8_T  = 1
mavlink.MAVLINK_TYPE_INT8_T   = 2
mavlink.MAVLINK_TYPE_UINT16_T = 3
mavlink.MAVLINK_TYPE_INT16_T  = 4
mavlink.MAVLINK_TYPE_UINT32_T = 5
mavlink.MAVLINK_TYPE_INT32_T  = 6
mavlink.MAVLINK_TYPE_UINT64_T = 7
mavlink.MAVLINK_TYPE_INT64_T  = 8
mavlink.MAVLINK_TYPE_FLOAT    = 9
mavlink.MAVLINK_TYPE_DOUBLE   = 10

// Mavlink headers incorporate sequence, source system (platform) and source component. 
mavlink.header = function(msgId, mlen, seq, srcSystem, srcComponent) {

    this.mlen = ( typeof mlen === 'undefined' ) ? 0 : mlen;
    this.seq = ( typeof seq === 'undefined' ) ? 0 : seq;
    this.srcSystem = ( typeof srcSystem === 'undefined' ) ? 0 : srcSystem;
    this.srcComponent = ( typeof srcComponent === 'undefined' ) ? 0 : srcComponent;
    this.msgId = msgId

}

mavlink.header.prototype.pack = function() {
    return jspack.Pack('BBBBBB', [254, this.mlen, this.seq, this.srcSystem, this.srcComponent, this.msgId]);
}

// Base class declaration: mavlink.message will be the parent class for each
// concrete implementation in mavlink.messages.
mavlink.message = function() {};

// Convenience setter to facilitate turning the unpacked array of data into member properties
mavlink.message.prototype.set = function(args) {
    _.each(this.fieldnames, function(e, i) {
        this[e] = args[i];
    }, this);
};

// This pack function builds the header and produces a complete MAVLink message,
// including header and message CRC.
mavlink.message.prototype.pack = function(crc_extra, payload) {

    this.payload = payload;
    this.header = new mavlink.header(this.id, payload.length, this.seq, this.srcSystem, this.srcComponent);    
    this.msgbuf = this.header.pack().concat(payload);
    var crc = mavutil.x25Crc(this.msgbuf.slice(1));

    // For now, assume always using crc_extra = True.  TODO: check/fix this.
    crc = mavutil.x25Crc([crc_extra], crc);
    this.msgbuf = this.msgbuf.concat(jspack.Pack('<H', [crc] ) );
    return this.msgbuf;

}


// enums

// SENSESOAR_MODE
mavlink.SENSESOAR_MODE_GLIDING = 1 // Gliding mode with motors off
mavlink.SENSESOAR_MODE_AUTONOMOUS = 2 // Autonomous flight
mavlink.SENSESOAR_MODE_MANUAL = 3 // RC controlled
mavlink.SENSESOAR_MODE_ENUM_END = 4 // 

// MAV_AUTOPILOT
mavlink.MAV_AUTOPILOT_GENERIC = 0 // Generic autopilot, full support for everything
mavlink.MAV_AUTOPILOT_PIXHAWK = 1 // PIXHAWK autopilot, http://pixhawk.ethz.ch
mavlink.MAV_AUTOPILOT_SLUGS = 2 // SLUGS autopilot, http://slugsuav.soe.ucsc.edu
mavlink.MAV_AUTOPILOT_ARDUPILOTMEGA = 3 // ArduPilotMega / ArduCopter, http://diydrones.com
mavlink.MAV_AUTOPILOT_OPENPILOT = 4 // OpenPilot, http://openpilot.org
mavlink.MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY = 5 // Generic autopilot only supporting simple waypoints
mavlink.MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = 6 // Generic autopilot supporting waypoints and other simple navigation
                        // commands
mavlink.MAV_AUTOPILOT_GENERIC_MISSION_FULL = 7 // Generic autopilot supporting the full mission command set
mavlink.MAV_AUTOPILOT_INVALID = 8 // No valid autopilot, e.g. a GCS or other MAVLink component
mavlink.MAV_AUTOPILOT_PPZ = 9 // PPZ UAV - http://nongnu.org/paparazzi
mavlink.MAV_AUTOPILOT_UDB = 10 // UAV Dev Board
mavlink.MAV_AUTOPILOT_FP = 11 // FlexiPilot
mavlink.MAV_AUTOPILOT_PX4 = 12 // PX4 Autopilot - http://pixhawk.ethz.ch/px4/
mavlink.MAV_AUTOPILOT_SMACCMPILOT = 13 // SMACCMPilot - http://smaccmpilot.org
mavlink.MAV_AUTOPILOT_ENUM_END = 14 // 

// MAV_TYPE
mavlink.MAV_TYPE_GENERIC = 0 // Generic micro air vehicle.
mavlink.MAV_TYPE_FIXED_WING = 1 // Fixed wing aircraft.
mavlink.MAV_TYPE_QUADROTOR = 2 // Quadrotor
mavlink.MAV_TYPE_COAXIAL = 3 // Coaxial helicopter
mavlink.MAV_TYPE_HELICOPTER = 4 // Normal helicopter with tail rotor.
mavlink.MAV_TYPE_ANTENNA_TRACKER = 5 // Ground installation
mavlink.MAV_TYPE_GCS = 6 // Operator control unit / ground control station
mavlink.MAV_TYPE_AIRSHIP = 7 // Airship, controlled
mavlink.MAV_TYPE_FREE_BALLOON = 8 // Free balloon, uncontrolled
mavlink.MAV_TYPE_ROCKET = 9 // Rocket
mavlink.MAV_TYPE_GROUND_ROVER = 10 // Ground rover
mavlink.MAV_TYPE_SURFACE_BOAT = 11 // Surface vessel, boat, ship
mavlink.MAV_TYPE_SUBMARINE = 12 // Submarine
mavlink.MAV_TYPE_HEXAROTOR = 13 // Hexarotor
mavlink.MAV_TYPE_OCTOROTOR = 14 // Octorotor
mavlink.MAV_TYPE_TRICOPTER = 15 // Octorotor
mavlink.MAV_TYPE_FLAPPING_WING = 16 // Flapping wing
mavlink.MAV_TYPE_KITE = 17 // Flapping wing
mavlink.MAV_TYPE_ENUM_END = 18 // 

// MAV_MODE_FLAG
mavlink.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1 // 0b00000001 Reserved for future use.
mavlink.MAV_MODE_FLAG_TEST_ENABLED = 2 // 0b00000010 system has a test mode enabled. This flag is intended for
                        // temporary system tests and should not be
                        // used for stable implementations.
mavlink.MAV_MODE_FLAG_AUTO_ENABLED = 4 // 0b00000100 autonomous mode enabled, system finds its own goal
                        // positions. Guided flag can be set or not,
                        // depends on the actual implementation.
mavlink.MAV_MODE_FLAG_GUIDED_ENABLED = 8 // 0b00001000 guided mode enabled, system flies MISSIONs / mission items.
mavlink.MAV_MODE_FLAG_STABILIZE_ENABLED = 16 // 0b00010000 system stabilizes electronically its attitude (and
                        // optionally position). It needs however
                        // further control inputs to move around.
mavlink.MAV_MODE_FLAG_HIL_ENABLED = 32 // 0b00100000 hardware in the loop simulation. All motors / actuators are
                        // blocked, but internal software is full
                        // operational.
mavlink.MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64 // 0b01000000 remote control input is enabled.
mavlink.MAV_MODE_FLAG_SAFETY_ARMED = 128 // 0b10000000 MAV safety set to armed. Motors are enabled / running / can
                        // start. Ready to fly.
mavlink.MAV_MODE_FLAG_ENUM_END = 129 // 

// MAV_MODE_FLAG_DECODE_POSITION
mavlink.MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE = 1 // Eighth bit: 00000001
mavlink.MAV_MODE_FLAG_DECODE_POSITION_TEST = 2 // Seventh bit: 00000010
mavlink.MAV_MODE_FLAG_DECODE_POSITION_AUTO = 4 // Sixt bit:   00000100
mavlink.MAV_MODE_FLAG_DECODE_POSITION_GUIDED = 8 // Fifth bit:  00001000
mavlink.MAV_MODE_FLAG_DECODE_POSITION_STABILIZE = 16 // Fourth bit: 00010000
mavlink.MAV_MODE_FLAG_DECODE_POSITION_HIL = 32 // Third bit:  00100000
mavlink.MAV_MODE_FLAG_DECODE_POSITION_MANUAL = 64 // Second bit: 01000000
mavlink.MAV_MODE_FLAG_DECODE_POSITION_SAFETY = 128 // First bit:  10000000
mavlink.MAV_MODE_FLAG_DECODE_POSITION_ENUM_END = 129 // 

// MAV_GOTO
mavlink.MAV_GOTO_DO_HOLD = 0 // Hold at the current position.
mavlink.MAV_GOTO_DO_CONTINUE = 1 // Continue with the next item in mission execution.
mavlink.MAV_GOTO_HOLD_AT_CURRENT_POSITION = 2 // Hold at the current position of the system
mavlink.MAV_GOTO_HOLD_AT_SPECIFIED_POSITION = 3 // Hold at the position specified in the parameters of the DO_HOLD action
mavlink.MAV_GOTO_ENUM_END = 4 // 

// MAV_MODE
mavlink.MAV_MODE_PREFLIGHT = 0 // System is not ready to fly, booting, calibrating, etc. No flag is set.
mavlink.MAV_MODE_MANUAL_DISARMED = 64 // System is allowed to be active, under manual (RC) control, no
                        // stabilization
mavlink.MAV_MODE_TEST_DISARMED = 66 // UNDEFINED mode. This solely depends on the autopilot - use with
                        // caution, intended for developers only.
mavlink.MAV_MODE_STABILIZE_DISARMED = 80 // System is allowed to be active, under assisted RC control.
mavlink.MAV_MODE_GUIDED_DISARMED = 88 // System is allowed to be active, under autonomous control, manual
                        // setpoint
mavlink.MAV_MODE_AUTO_DISARMED = 92 // System is allowed to be active, under autonomous control and
                        // navigation (the trajectory is decided
                        // onboard and not pre-programmed by MISSIONs)
mavlink.MAV_MODE_MANUAL_ARMED = 192 // System is allowed to be active, under manual (RC) control, no
                        // stabilization
mavlink.MAV_MODE_TEST_ARMED = 194 // UNDEFINED mode. This solely depends on the autopilot - use with
                        // caution, intended for developers only.
mavlink.MAV_MODE_STABILIZE_ARMED = 208 // System is allowed to be active, under assisted RC control.
mavlink.MAV_MODE_GUIDED_ARMED = 216 // System is allowed to be active, under autonomous control, manual
                        // setpoint
mavlink.MAV_MODE_AUTO_ARMED = 220 // System is allowed to be active, under autonomous control and
                        // navigation (the trajectory is decided
                        // onboard and not pre-programmed by MISSIONs)
mavlink.MAV_MODE_ENUM_END = 221 // 

// MAV_STATE
mavlink.MAV_STATE_UNINIT = 0 // Uninitialized system, state is unknown.
mavlink.MAV_STATE_BOOT = 1 // System is booting up.
mavlink.MAV_STATE_CALIBRATING = 2 // System is calibrating and not flight-ready.
mavlink.MAV_STATE_STANDBY = 3 // System is grounded and on standby. It can be launched any time.
mavlink.MAV_STATE_ACTIVE = 4 // System is active and might be already airborne. Motors are engaged.
mavlink.MAV_STATE_CRITICAL = 5 // System is in a non-normal flight mode. It can however still navigate.
mavlink.MAV_STATE_EMERGENCY = 6 // System is in a non-normal flight mode. It lost control over parts or
                        // over the whole airframe. It is in mayday
                        // and going down.
mavlink.MAV_STATE_POWEROFF = 7 // System just initialized its power-down sequence, will shut down now.
mavlink.MAV_STATE_ENUM_END = 8 // 

// MAV_COMPONENT
mavlink.MAV_COMP_ID_ALL = 0 // 
mavlink.MAV_COMP_ID_CAMERA = 100 // 
mavlink.MAV_COMP_ID_SERVO1 = 140 // 
mavlink.MAV_COMP_ID_SERVO2 = 141 // 
mavlink.MAV_COMP_ID_SERVO3 = 142 // 
mavlink.MAV_COMP_ID_SERVO4 = 143 // 
mavlink.MAV_COMP_ID_SERVO5 = 144 // 
mavlink.MAV_COMP_ID_SERVO6 = 145 // 
mavlink.MAV_COMP_ID_SERVO7 = 146 // 
mavlink.MAV_COMP_ID_SERVO8 = 147 // 
mavlink.MAV_COMP_ID_SERVO9 = 148 // 
mavlink.MAV_COMP_ID_SERVO10 = 149 // 
mavlink.MAV_COMP_ID_SERVO11 = 150 // 
mavlink.MAV_COMP_ID_SERVO12 = 151 // 
mavlink.MAV_COMP_ID_SERVO13 = 152 // 
mavlink.MAV_COMP_ID_SERVO14 = 153 // 
mavlink.MAV_COMP_ID_MAPPER = 180 // 
mavlink.MAV_COMP_ID_MISSIONPLANNER = 190 // 
mavlink.MAV_COMP_ID_PATHPLANNER = 195 // 
mavlink.MAV_COMP_ID_IMU = 200 // 
mavlink.MAV_COMP_ID_IMU_2 = 201 // 
mavlink.MAV_COMP_ID_IMU_3 = 202 // 
mavlink.MAV_COMP_ID_GPS = 220 // 
mavlink.MAV_COMP_ID_UDP_BRIDGE = 240 // 
mavlink.MAV_COMP_ID_UART_BRIDGE = 241 // 
mavlink.MAV_COMP_ID_SYSTEM_CONTROL = 250 // 
mavlink.MAV_COMPONENT_ENUM_END = 251 // 

// MAV_FRAME
mavlink.MAV_FRAME_GLOBAL = 0 // Global coordinate frame, WGS84 coordinate system. First value / x:
                        // latitude, second value / y: longitude,
                        // third value / z: positive altitude over
                        // mean sea level (MSL)
mavlink.MAV_FRAME_LOCAL_NED = 1 // Local coordinate frame, Z-up (x: north, y: east, z: down).
mavlink.MAV_FRAME_MISSION = 2 // NOT a coordinate frame, indicates a mission command.
mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT = 3 // Global coordinate frame, WGS84 coordinate system, relative altitude
                        // over ground with respect to the home
                        // position. First value / x: latitude, second
                        // value / y: longitude, third value / z:
                        // positive altitude with 0 being at the
                        // altitude of the home location.
mavlink.MAV_FRAME_LOCAL_ENU = 4 // Local coordinate frame, Z-down (x: east, y: north, z: up)
mavlink.MAV_FRAME_ENUM_END = 5 // 

// MAVLINK_DATA_STREAM_TYPE
mavlink.MAVLINK_DATA_STREAM_IMG_JPEG = 1 // 
mavlink.MAVLINK_DATA_STREAM_IMG_BMP = 2 // 
mavlink.MAVLINK_DATA_STREAM_IMG_RAW8U = 3 // 
mavlink.MAVLINK_DATA_STREAM_IMG_RAW32U = 4 // 
mavlink.MAVLINK_DATA_STREAM_IMG_PGM = 5 // 
mavlink.MAVLINK_DATA_STREAM_IMG_PNG = 6 // 
mavlink.MAVLINK_DATA_STREAM_TYPE_ENUM_END = 7 // 

// MAV_CMD
mavlink.MAV_CMD_NAV_WAYPOINT = 16 // Navigate to MISSION.
mavlink.MAV_CMD_NAV_LOITER_UNLIM = 17 // Loiter around this MISSION an unlimited amount of time
mavlink.MAV_CMD_NAV_LOITER_TURNS = 18 // Loiter around this MISSION for X turns
mavlink.MAV_CMD_NAV_LOITER_TIME = 19 // Loiter around this MISSION for X seconds
mavlink.MAV_CMD_NAV_RETURN_TO_LAUNCH = 20 // Return to launch location
mavlink.MAV_CMD_NAV_LAND = 21 // Land at location
mavlink.MAV_CMD_NAV_TAKEOFF = 22 // Takeoff from ground / hand
mavlink.MAV_CMD_NAV_ROI = 80 // Sets the region of interest (ROI) for a sensor set or the vehicle
                        // itself. This can then be used by the
                        // vehicles control system to control the
                        // vehicle attitude and the attitude of
                        // various sensors such as cameras.
mavlink.MAV_CMD_NAV_PATHPLANNING = 81 // Control autonomous path planning on the MAV.
mavlink.MAV_CMD_NAV_LAST = 95 // NOP - This command is only used to mark the upper limit of the
                        // NAV/ACTION commands in the enumeration
mavlink.MAV_CMD_CONDITION_DELAY = 112 // Delay mission state machine.
mavlink.MAV_CMD_CONDITION_CHANGE_ALT = 113 // Ascend/descend at rate.  Delay mission state machine until desired
                        // altitude reached.
mavlink.MAV_CMD_CONDITION_DISTANCE = 114 // Delay mission state machine until within desired distance of next NAV
                        // point.
mavlink.MAV_CMD_CONDITION_YAW = 115 // Reach a certain target angle.
mavlink.MAV_CMD_CONDITION_LAST = 159 // NOP - This command is only used to mark the upper limit of the
                        // CONDITION commands in the enumeration
mavlink.MAV_CMD_DO_SET_MODE = 176 // Set system mode.
mavlink.MAV_CMD_DO_JUMP = 177 // Jump to the desired command in the mission list.  Repeat this action
                        // only the specified number of times
mavlink.MAV_CMD_DO_CHANGE_SPEED = 178 // Change speed and/or throttle set points.
mavlink.MAV_CMD_DO_SET_HOME = 179 // Changes the home location either to the current location or a
                        // specified location.
mavlink.MAV_CMD_DO_SET_PARAMETER = 180 // Set a system parameter.  Caution!  Use of this command requires
                        // knowledge of the numeric enumeration value
                        // of the parameter.
mavlink.MAV_CMD_DO_SET_RELAY = 181 // Set a relay to a condition.
mavlink.MAV_CMD_DO_REPEAT_RELAY = 182 // Cycle a relay on and off for a desired number of cyles with a desired
                        // period.
mavlink.MAV_CMD_DO_SET_SERVO = 183 // Set a servo to a desired PWM value.
mavlink.MAV_CMD_DO_REPEAT_SERVO = 184 // Cycle a between its nominal setting and a desired PWM for a desired
                        // number of cycles with a desired period.
mavlink.MAV_CMD_DO_CONTROL_VIDEO = 200 // Control onboard camera system.
mavlink.MAV_CMD_DO_LAST = 240 // NOP - This command is only used to mark the upper limit of the DO
                        // commands in the enumeration
mavlink.MAV_CMD_PREFLIGHT_CALIBRATION = 241 // Trigger calibration. This command will be only accepted if in pre-
                        // flight mode.
mavlink.MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242 // Set sensor offsets. This command will be only accepted if in pre-
                        // flight mode.
mavlink.MAV_CMD_PREFLIGHT_STORAGE = 245 // Request storage of different parameter values and logs. This command
                        // will be only accepted if in pre-flight
                        // mode.
mavlink.MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246 // Request the reboot or shutdown of system components.
mavlink.MAV_CMD_OVERRIDE_GOTO = 252 // Hold / continue the current action
mavlink.MAV_CMD_MISSION_START = 300 // start running a mission
mavlink.MAV_CMD_COMPONENT_ARM_DISARM = 400 // Arms / Disarms a component
mavlink.MAV_CMD_ENUM_END = 401 // 

// MAV_DATA_STREAM
mavlink.MAV_DATA_STREAM_ALL = 0 // Enable all data streams
mavlink.MAV_DATA_STREAM_RAW_SENSORS = 1 // Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.
mavlink.MAV_DATA_STREAM_EXTENDED_STATUS = 2 // Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS
mavlink.MAV_DATA_STREAM_RC_CHANNELS = 3 // Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW
mavlink.MAV_DATA_STREAM_RAW_CONTROLLER = 4 // Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT,
                        // NAV_CONTROLLER_OUTPUT.
mavlink.MAV_DATA_STREAM_POSITION = 6 // Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages.
mavlink.MAV_DATA_STREAM_EXTRA1 = 10 // Dependent on the autopilot
mavlink.MAV_DATA_STREAM_EXTRA2 = 11 // Dependent on the autopilot
mavlink.MAV_DATA_STREAM_EXTRA3 = 12 // Dependent on the autopilot
mavlink.MAV_DATA_STREAM_ENUM_END = 13 // 

// MAV_ROI
mavlink.MAV_ROI_NONE = 0 // No region of interest.
mavlink.MAV_ROI_WPNEXT = 1 // Point toward next MISSION.
mavlink.MAV_ROI_WPINDEX = 2 // Point toward given MISSION.
mavlink.MAV_ROI_LOCATION = 3 // Point toward fixed location.
mavlink.MAV_ROI_TARGET = 4 // Point toward of given id.
mavlink.MAV_ROI_ENUM_END = 5 // 

// MAV_CMD_ACK
mavlink.MAV_CMD_ACK_OK = 1 // Command / mission item is ok.
mavlink.MAV_CMD_ACK_ERR_FAIL = 2 // Generic error message if none of the other reasons fails or if no
                        // detailed error reporting is implemented.
mavlink.MAV_CMD_ACK_ERR_ACCESS_DENIED = 3 // The system is refusing to accept this command from this source /
                        // communication partner.
mavlink.MAV_CMD_ACK_ERR_NOT_SUPPORTED = 4 // Command or mission item is not supported, other commands would be
                        // accepted.
mavlink.MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED = 5 // The coordinate frame of this command / mission item is not supported.
mavlink.MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE = 6 // The coordinate frame of this command is ok, but he coordinate values
                        // exceed the safety limits of this system.
                        // This is a generic error, please use the
                        // more specific error messages below if
                        // possible.
mavlink.MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE = 7 // The X or latitude value is out of range.
mavlink.MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE = 8 // The Y or longitude value is out of range.
mavlink.MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE = 9 // The Z or altitude value is out of range.
mavlink.MAV_CMD_ACK_ENUM_END = 10 // 

// MAV_PARAM_TYPE
mavlink.MAV_PARAM_TYPE_UINT8 = 1 // 8-bit unsigned integer
mavlink.MAV_PARAM_TYPE_INT8 = 2 // 8-bit signed integer
mavlink.MAV_PARAM_TYPE_UINT16 = 3 // 16-bit unsigned integer
mavlink.MAV_PARAM_TYPE_INT16 = 4 // 16-bit signed integer
mavlink.MAV_PARAM_TYPE_UINT32 = 5 // 32-bit unsigned integer
mavlink.MAV_PARAM_TYPE_INT32 = 6 // 32-bit signed integer
mavlink.MAV_PARAM_TYPE_UINT64 = 7 // 64-bit unsigned integer
mavlink.MAV_PARAM_TYPE_INT64 = 8 // 64-bit signed integer
mavlink.MAV_PARAM_TYPE_REAL32 = 9 // 32-bit floating-point
mavlink.MAV_PARAM_TYPE_REAL64 = 10 // 64-bit floating-point
mavlink.MAV_PARAM_TYPE_ENUM_END = 11 // 

// MAV_RESULT
mavlink.MAV_RESULT_ACCEPTED = 0 // Command ACCEPTED and EXECUTED
mavlink.MAV_RESULT_TEMPORARILY_REJECTED = 1 // Command TEMPORARY REJECTED/DENIED
mavlink.MAV_RESULT_DENIED = 2 // Command PERMANENTLY DENIED
mavlink.MAV_RESULT_UNSUPPORTED = 3 // Command UNKNOWN/UNSUPPORTED
mavlink.MAV_RESULT_FAILED = 4 // Command executed, but failed
mavlink.MAV_RESULT_ENUM_END = 5 // 

// MAV_MISSION_RESULT
mavlink.MAV_MISSION_ACCEPTED = 0 // mission accepted OK
mavlink.MAV_MISSION_ERROR = 1 // generic error / not accepting mission commands at all right now
mavlink.MAV_MISSION_UNSUPPORTED_FRAME = 2 // coordinate frame is not supported
mavlink.MAV_MISSION_UNSUPPORTED = 3 // command is not supported
mavlink.MAV_MISSION_NO_SPACE = 4 // mission item exceeds storage space
mavlink.MAV_MISSION_INVALID = 5 // one of the parameters has an invalid value
mavlink.MAV_MISSION_INVALID_PARAM1 = 6 // param1 has an invalid value
mavlink.MAV_MISSION_INVALID_PARAM2 = 7 // param2 has an invalid value
mavlink.MAV_MISSION_INVALID_PARAM3 = 8 // param3 has an invalid value
mavlink.MAV_MISSION_INVALID_PARAM4 = 9 // param4 has an invalid value
mavlink.MAV_MISSION_INVALID_PARAM5_X = 10 // x/param5 has an invalid value
mavlink.MAV_MISSION_INVALID_PARAM6_Y = 11 // y/param6 has an invalid value
mavlink.MAV_MISSION_INVALID_PARAM7 = 12 // param7 has an invalid value
mavlink.MAV_MISSION_INVALID_SEQUENCE = 13 // received waypoint out of sequence
mavlink.MAV_MISSION_DENIED = 14 // not accepting any mission commands from this communication partner
mavlink.MAV_MISSION_RESULT_ENUM_END = 15 // 

// MAV_SEVERITY
mavlink.MAV_SEVERITY_EMERGENCY = 0 // System is unusable. This is a "panic" condition.
mavlink.MAV_SEVERITY_ALERT = 1 // Action should be taken immediately. Indicates error in non-critical
                        // systems.
mavlink.MAV_SEVERITY_CRITICAL = 2 // Action must be taken immediately. Indicates failure in a primary
                        // system.
mavlink.MAV_SEVERITY_ERROR = 3 // Indicates an error in secondary/redundant systems.
mavlink.MAV_SEVERITY_WARNING = 4 // Indicates about a possible future error if this is not resolved within
                        // a given timeframe. Example would be a low
                        // battery warning.
mavlink.MAV_SEVERITY_NOTICE = 5 // An unusual event has occured, though not an error condition. This
                        // should be investigated for the root cause.
mavlink.MAV_SEVERITY_INFO = 6 // Normal operational messages. Useful for logging. No action is required
                        // for these messages.
mavlink.MAV_SEVERITY_DEBUG = 7 // Useful non-operational messages that can assist in debugging. These
                        // should not occur during normal operation.
mavlink.MAV_SEVERITY_ENUM_END = 8 // 

// message IDs
mavlink.MAVLINK_MSG_ID_BAD_DATA = -1
mavlink.MAVLINK_MSG_ID_OBS_POSITION = 170
mavlink.MAVLINK_MSG_ID_OBS_VELOCITY = 172
mavlink.MAVLINK_MSG_ID_OBS_ATTITUDE = 174
mavlink.MAVLINK_MSG_ID_OBS_WIND = 176
mavlink.MAVLINK_MSG_ID_OBS_AIR_VELOCITY = 178
mavlink.MAVLINK_MSG_ID_OBS_BIAS = 180
mavlink.MAVLINK_MSG_ID_OBS_QFF = 182
mavlink.MAVLINK_MSG_ID_OBS_AIR_TEMP = 183
mavlink.MAVLINK_MSG_ID_FILT_ROT_VEL = 184
mavlink.MAVLINK_MSG_ID_LLC_OUT = 186
mavlink.MAVLINK_MSG_ID_PM_ELEC = 188
mavlink.MAVLINK_MSG_ID_SYS_STAT = 190
mavlink.MAVLINK_MSG_ID_CMD_AIRSPEED_CHNG = 192
mavlink.MAVLINK_MSG_ID_CMD_AIRSPEED_ACK = 194
mavlink.MAVLINK_MSG_ID_HEARTBEAT = 0
mavlink.MAVLINK_MSG_ID_SYS_STATUS = 1
mavlink.MAVLINK_MSG_ID_SYSTEM_TIME = 2
mavlink.MAVLINK_MSG_ID_PING = 4
mavlink.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL = 5
mavlink.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK = 6
mavlink.MAVLINK_MSG_ID_AUTH_KEY = 7
mavlink.MAVLINK_MSG_ID_SET_MODE = 11
mavlink.MAVLINK_MSG_ID_PARAM_REQUEST_READ = 20
mavlink.MAVLINK_MSG_ID_PARAM_REQUEST_LIST = 21
mavlink.MAVLINK_MSG_ID_PARAM_VALUE = 22
mavlink.MAVLINK_MSG_ID_PARAM_SET = 23
mavlink.MAVLINK_MSG_ID_GPS_RAW_INT = 24
mavlink.MAVLINK_MSG_ID_GPS_STATUS = 25
mavlink.MAVLINK_MSG_ID_SCALED_IMU = 26
mavlink.MAVLINK_MSG_ID_RAW_IMU = 27
mavlink.MAVLINK_MSG_ID_RAW_PRESSURE = 28
mavlink.MAVLINK_MSG_ID_SCALED_PRESSURE = 29
mavlink.MAVLINK_MSG_ID_ATTITUDE = 30
mavlink.MAVLINK_MSG_ID_ATTITUDE_QUATERNION = 31
mavlink.MAVLINK_MSG_ID_LOCAL_POSITION_NED = 32
mavlink.MAVLINK_MSG_ID_GLOBAL_POSITION_INT = 33
mavlink.MAVLINK_MSG_ID_RC_CHANNELS_SCALED = 34
mavlink.MAVLINK_MSG_ID_RC_CHANNELS_RAW = 35
mavlink.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW = 36
mavlink.MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST = 37
mavlink.MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST = 38
mavlink.MAVLINK_MSG_ID_MISSION_ITEM = 39
mavlink.MAVLINK_MSG_ID_MISSION_REQUEST = 40
mavlink.MAVLINK_MSG_ID_MISSION_SET_CURRENT = 41
mavlink.MAVLINK_MSG_ID_MISSION_CURRENT = 42
mavlink.MAVLINK_MSG_ID_MISSION_REQUEST_LIST = 43
mavlink.MAVLINK_MSG_ID_MISSION_COUNT = 44
mavlink.MAVLINK_MSG_ID_MISSION_CLEAR_ALL = 45
mavlink.MAVLINK_MSG_ID_MISSION_ITEM_REACHED = 46
mavlink.MAVLINK_MSG_ID_MISSION_ACK = 47
mavlink.MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN = 48
mavlink.MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN = 49
mavlink.MAVLINK_MSG_ID_SET_LOCAL_POSITION_SETPOINT = 50
mavlink.MAVLINK_MSG_ID_LOCAL_POSITION_SETPOINT = 51
mavlink.MAVLINK_MSG_ID_GLOBAL_POSITION_SETPOINT_INT = 52
mavlink.MAVLINK_MSG_ID_SET_GLOBAL_POSITION_SETPOINT_INT = 53
mavlink.MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA = 54
mavlink.MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA = 55
mavlink.MAVLINK_MSG_ID_SET_ROLL_PITCH_YAW_THRUST = 56
mavlink.MAVLINK_MSG_ID_SET_ROLL_PITCH_YAW_SPEED_THRUST = 57
mavlink.MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT = 58
mavlink.MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT = 59
mavlink.MAVLINK_MSG_ID_SET_QUAD_MOTORS_SETPOINT = 60
mavlink.MAVLINK_MSG_ID_SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST = 61
mavlink.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT = 62
mavlink.MAVLINK_MSG_ID_SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST = 63
mavlink.MAVLINK_MSG_ID_STATE_CORRECTION = 64
mavlink.MAVLINK_MSG_ID_REQUEST_DATA_STREAM = 66
mavlink.MAVLINK_MSG_ID_DATA_STREAM = 67
mavlink.MAVLINK_MSG_ID_MANUAL_CONTROL = 69
mavlink.MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE = 70
mavlink.MAVLINK_MSG_ID_VFR_HUD = 74
mavlink.MAVLINK_MSG_ID_COMMAND_LONG = 76
mavlink.MAVLINK_MSG_ID_COMMAND_ACK = 77
mavlink.MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT = 80
mavlink.MAVLINK_MSG_ID_MANUAL_SETPOINT = 81
mavlink.MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET = 89
mavlink.MAVLINK_MSG_ID_HIL_STATE = 90
mavlink.MAVLINK_MSG_ID_HIL_CONTROLS = 91
mavlink.MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW = 92
mavlink.MAVLINK_MSG_ID_OPTICAL_FLOW = 100
mavlink.MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE = 101
mavlink.MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE = 102
mavlink.MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE = 103
mavlink.MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE = 104
mavlink.MAVLINK_MSG_ID_HIGHRES_IMU = 105
mavlink.MAVLINK_MSG_ID_OMNIDIRECTIONAL_FLOW = 106
mavlink.MAVLINK_MSG_ID_FILE_TRANSFER_START = 110
mavlink.MAVLINK_MSG_ID_FILE_TRANSFER_DIR_LIST = 111
mavlink.MAVLINK_MSG_ID_FILE_TRANSFER_RES = 112
mavlink.MAVLINK_MSG_ID_BATTERY_STATUS = 147
mavlink.MAVLINK_MSG_ID_SETPOINT_8DOF = 148
mavlink.MAVLINK_MSG_ID_SETPOINT_6DOF = 149
mavlink.MAVLINK_MSG_ID_MEMORY_VECT = 249
mavlink.MAVLINK_MSG_ID_DEBUG_VECT = 250
mavlink.MAVLINK_MSG_ID_NAMED_VALUE_FLOAT = 251
mavlink.MAVLINK_MSG_ID_NAMED_VALUE_INT = 252
mavlink.MAVLINK_MSG_ID_STATUSTEXT = 253
mavlink.MAVLINK_MSG_ID_DEBUG = 254

mavlink.messages = {};

/* 
Position estimate of the observer in global frame

                lon                       :  (int32_t)
                lat                       :  (int32_t)
                alt                       :  (int32_t)

*/
mavlink.messages.obs_position = function(lon, lat, alt) {

    this.format = '<iii';
    this.id = mavlink.MAVLINK_MSG_ID_OBS_POSITION;
    this.order_map = [0, 1, 2];
    this.crc_extra = 15;
    this.name = 'OBS_POSITION';

    this.fieldnames = ['lon', 'lat', 'alt'];


    this.set(arguments);

}
        
mavlink.messages.obs_position.prototype = new mavlink.message;

mavlink.messages.obs_position.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.lon, this.lat, this.alt]));
}

/* 
velocity estimate of the observer in NED inertial frame

                vel                       :  (float)

*/
mavlink.messages.obs_velocity = function(vel) {

    this.format = '<3f';
    this.id = mavlink.MAVLINK_MSG_ID_OBS_VELOCITY;
    this.order_map = [0];
    this.crc_extra = 108;
    this.name = 'OBS_VELOCITY';

    this.fieldnames = ['vel'];


    this.set(arguments);

}
        
mavlink.messages.obs_velocity.prototype = new mavlink.message;

mavlink.messages.obs_velocity.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.vel]));
}

/* 
attitude estimate of the observe

                quat                      :  (double)

*/
mavlink.messages.obs_attitude = function(quat) {

    this.format = '<4d';
    this.id = mavlink.MAVLINK_MSG_ID_OBS_ATTITUDE;
    this.order_map = [0];
    this.crc_extra = 146;
    this.name = 'OBS_ATTITUDE';

    this.fieldnames = ['quat'];


    this.set(arguments);

}
        
mavlink.messages.obs_attitude.prototype = new mavlink.message;

mavlink.messages.obs_attitude.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.quat]));
}

/* 
Wind estimate in NED inertial frame

                wind                      :  (float)

*/
mavlink.messages.obs_wind = function(wind) {

    this.format = '<3f';
    this.id = mavlink.MAVLINK_MSG_ID_OBS_WIND;
    this.order_map = [0];
    this.crc_extra = 16;
    this.name = 'OBS_WIND';

    this.fieldnames = ['wind'];


    this.set(arguments);

}
        
mavlink.messages.obs_wind.prototype = new mavlink.message;

mavlink.messages.obs_wind.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.wind]));
}

/* 
Estimate of the air velocity

                magnitude                 :  (float)
                aoa                       :  (float)
                slip                      :  (float)

*/
mavlink.messages.obs_air_velocity = function(magnitude, aoa, slip) {

    this.format = '<fff';
    this.id = mavlink.MAVLINK_MSG_ID_OBS_AIR_VELOCITY;
    this.order_map = [0, 1, 2];
    this.crc_extra = 32;
    this.name = 'OBS_AIR_VELOCITY';

    this.fieldnames = ['magnitude', 'aoa', 'slip'];


    this.set(arguments);

}
        
mavlink.messages.obs_air_velocity.prototype = new mavlink.message;

mavlink.messages.obs_air_velocity.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.magnitude, this.aoa, this.slip]));
}

/* 
IMU biases

                accBias                   :  (float)
                gyroBias                  :  (float)

*/
mavlink.messages.obs_bias = function(accBias, gyroBias) {

    this.format = '<3f3f';
    this.id = mavlink.MAVLINK_MSG_ID_OBS_BIAS;
    this.order_map = [0, 1];
    this.crc_extra = 159;
    this.name = 'OBS_BIAS';

    this.fieldnames = ['accBias', 'gyroBias'];


    this.set(arguments);

}
        
mavlink.messages.obs_bias.prototype = new mavlink.message;

mavlink.messages.obs_bias.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.accBias, this.gyroBias]));
}

/* 
estimate of the pressure at sea level

                qff                       :  (float)

*/
mavlink.messages.obs_qff = function(qff) {

    this.format = '<f';
    this.id = mavlink.MAVLINK_MSG_ID_OBS_QFF;
    this.order_map = [0];
    this.crc_extra = 24;
    this.name = 'OBS_QFF';

    this.fieldnames = ['qff'];


    this.set(arguments);

}
        
mavlink.messages.obs_qff.prototype = new mavlink.message;

mavlink.messages.obs_qff.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.qff]));
}

/* 
ambient air temperature

                airT                      :  (float)

*/
mavlink.messages.obs_air_temp = function(airT) {

    this.format = '<f';
    this.id = mavlink.MAVLINK_MSG_ID_OBS_AIR_TEMP;
    this.order_map = [0];
    this.crc_extra = 248;
    this.name = 'OBS_AIR_TEMP';

    this.fieldnames = ['airT'];


    this.set(arguments);

}
        
mavlink.messages.obs_air_temp.prototype = new mavlink.message;

mavlink.messages.obs_air_temp.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.airT]));
}

/* 
filtered rotational velocity

                rotVel                    :  (float)

*/
mavlink.messages.filt_rot_vel = function(rotVel) {

    this.format = '<3f';
    this.id = mavlink.MAVLINK_MSG_ID_FILT_ROT_VEL;
    this.order_map = [0];
    this.crc_extra = 79;
    this.name = 'FILT_ROT_VEL';

    this.fieldnames = ['rotVel'];


    this.set(arguments);

}
        
mavlink.messages.filt_rot_vel.prototype = new mavlink.message;

mavlink.messages.filt_rot_vel.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.rotVel]));
}

/* 
low level control output

                servoOut                  :  (int16_t)
                MotorOut                  :  (int16_t)

*/
mavlink.messages.llc_out = function(servoOut, MotorOut) {

    this.format = '<4h2h';
    this.id = mavlink.MAVLINK_MSG_ID_LLC_OUT;
    this.order_map = [0, 1];
    this.crc_extra = 5;
    this.name = 'LLC_OUT';

    this.fieldnames = ['servoOut', 'MotorOut'];


    this.set(arguments);

}
        
mavlink.messages.llc_out.prototype = new mavlink.message;

mavlink.messages.llc_out.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.servoOut, this.MotorOut]));
}

/* 
Power managment

                PwCons                    :  (float)
                BatStat                   :  (float)
                PwGen                     :  (float)

*/
mavlink.messages.pm_elec = function(PwCons, BatStat, PwGen) {

    this.format = '<ff3f';
    this.id = mavlink.MAVLINK_MSG_ID_PM_ELEC;
    this.order_map = [0, 1, 2];
    this.crc_extra = 170;
    this.name = 'PM_ELEC';

    this.fieldnames = ['PwCons', 'BatStat', 'PwGen'];


    this.set(arguments);

}
        
mavlink.messages.pm_elec.prototype = new mavlink.message;

mavlink.messages.pm_elec.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.PwCons, this.BatStat, this.PwGen]));
}

/* 
system status

                gps                       :  (uint8_t)
                act                       :  (uint8_t)
                mod                       :  (uint8_t)
                commRssi                  :  (uint8_t)

*/
mavlink.messages.sys_stat = function(gps, act, mod, commRssi) {

    this.format = '<BBBB';
    this.id = mavlink.MAVLINK_MSG_ID_SYS_STAT;
    this.order_map = [0, 1, 2, 3];
    this.crc_extra = 157;
    this.name = 'SYS_STAT';

    this.fieldnames = ['gps', 'act', 'mod', 'commRssi'];


    this.set(arguments);

}
        
mavlink.messages.sys_stat.prototype = new mavlink.message;

mavlink.messages.sys_stat.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.gps, this.act, this.mod, this.commRssi]));
}

/* 
change commanded air speed

                target                    :  (uint8_t)
                spCmd                     :  (float)

*/
mavlink.messages.cmd_airspeed_chng = function(target, spCmd) {

    this.format = '<fB';
    this.id = mavlink.MAVLINK_MSG_ID_CMD_AIRSPEED_CHNG;
    this.order_map = [1, 0];
    this.crc_extra = 209;
    this.name = 'CMD_AIRSPEED_CHNG';

    this.fieldnames = ['target', 'spCmd'];


    this.set(arguments);

}
        
mavlink.messages.cmd_airspeed_chng.prototype = new mavlink.message;

mavlink.messages.cmd_airspeed_chng.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.spCmd, this.target]));
}

/* 
accept change of airspeed

                spCmd                     :  (float)
                ack                       :  (uint8_t)

*/
mavlink.messages.cmd_airspeed_ack = function(spCmd, ack) {

    this.format = '<fB';
    this.id = mavlink.MAVLINK_MSG_ID_CMD_AIRSPEED_ACK;
    this.order_map = [0, 1];
    this.crc_extra = 243;
    this.name = 'CMD_AIRSPEED_ACK';

    this.fieldnames = ['spCmd', 'ack'];


    this.set(arguments);

}
        
mavlink.messages.cmd_airspeed_ack.prototype = new mavlink.message;

mavlink.messages.cmd_airspeed_ack.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.spCmd, this.ack]));
}

/* 
The heartbeat message shows that a system is present and responding.
The type of the MAV and Autopilot hardware allow the receiving system
to treat further messages from this system appropriate (e.g. by laying
out the user interface based on the autopilot).

                type                      : Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE ENUM) (uint8_t)
                autopilot                 : Autopilot type / class. defined in MAV_AUTOPILOT ENUM (uint8_t)
                base_mode                 : System mode bitfield, see MAV_MODE_FLAGS ENUM in mavlink/include/mavlink_types.h (uint8_t)
                custom_mode               : A bitfield for use for autopilot-specific flags. (uint32_t)
                system_status             : System status flag, see MAV_STATE ENUM (uint8_t)
                mavlink_version           : MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version (uint8_t)

*/
mavlink.messages.heartbeat = function(type, autopilot, base_mode, custom_mode, system_status, mavlink_version) {

    this.format = '<IBBBBB';
    this.id = mavlink.MAVLINK_MSG_ID_HEARTBEAT;
    this.order_map = [1, 2, 3, 0, 4, 5];
    this.crc_extra = 50;
    this.name = 'HEARTBEAT';

    this.fieldnames = ['type', 'autopilot', 'base_mode', 'custom_mode', 'system_status', 'mavlink_version'];


    this.set(arguments);

}
        
mavlink.messages.heartbeat.prototype = new mavlink.message;

mavlink.messages.heartbeat.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.custom_mode, this.type, this.autopilot, this.base_mode, this.system_status, this.mavlink_version]));
}

/* 
The general system state. If the system is following the MAVLink
standard, the system state is mainly defined by three orthogonal
states/modes: The system mode, which is either LOCKED (motors shut
down and locked), MANUAL (system under RC control), GUIDED (system
with autonomous position control, position setpoint controlled
manually) or AUTO (system guided by path/waypoint planner). The
NAV_MODE defined the current flight state: LIFTOFF (often an open-loop
maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal
navigation state machine. The system status shows wether the system is
currently active or not and if an emergency occured. During the
CRITICAL and EMERGENCY states the MAV is still considered to be
active, but should start emergency procedures autonomously. After a
failure occured it should first move from active to critical to allow
manual intervention and then move to emergency after a certain
timeout.

                onboard_control_sensors_present        : Bitmask showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present. Indices: 0: 3D gyro, 1: 3D acc, 2: 3D mag, 3: absolute pressure, 4: differential pressure, 5: GPS, 6: optical flow, 7: computer vision position, 8: laser based position, 9: external ground-truth (Vicon or Leica). Controllers: 10: 3D angular rate control 11: attitude stabilization, 12: yaw position, 13: z/altitude control, 14: x/y position control, 15: motor outputs / control (uint32_t)
                onboard_control_sensors_enabled        : Bitmask showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled. Indices: 0: 3D gyro, 1: 3D acc, 2: 3D mag, 3: absolute pressure, 4: differential pressure, 5: GPS, 6: optical flow, 7: computer vision position, 8: laser based position, 9: external ground-truth (Vicon or Leica). Controllers: 10: 3D angular rate control 11: attitude stabilization, 12: yaw position, 13: z/altitude control, 14: x/y position control, 15: motor outputs / control (uint32_t)
                onboard_control_sensors_health        : Bitmask showing which onboard controllers and sensors are operational or have an error:  Value of 0: not enabled. Value of 1: enabled. Indices: 0: 3D gyro, 1: 3D acc, 2: 3D mag, 3: absolute pressure, 4: differential pressure, 5: GPS, 6: optical flow, 7: computer vision position, 8: laser based position, 9: external ground-truth (Vicon or Leica). Controllers: 10: 3D angular rate control 11: attitude stabilization, 12: yaw position, 13: z/altitude control, 14: x/y position control, 15: motor outputs / control (uint32_t)
                load                      : Maximum usage in percent of the mainloop time, (0%: 0, 100%: 1000) should be always below 1000 (uint16_t)
                voltage_battery           : Battery voltage, in millivolts (1 = 1 millivolt) (uint16_t)
                current_battery           : Battery current, in 10*milliamperes (1 = 10 milliampere), -1: autopilot does not measure the current (int16_t)
                battery_remaining         : Remaining battery energy: (0%: 0, 100%: 100), -1: autopilot estimate the remaining battery (int8_t)
                drop_rate_comm            : Communication drops in percent, (0%: 0, 100%: 10'000), (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) (uint16_t)
                errors_comm               : Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) (uint16_t)
                errors_count1             : Autopilot-specific errors (uint16_t)
                errors_count2             : Autopilot-specific errors (uint16_t)
                errors_count3             : Autopilot-specific errors (uint16_t)
                errors_count4             : Autopilot-specific errors (uint16_t)

*/
mavlink.messages.sys_status = function(onboard_control_sensors_present, onboard_control_sensors_enabled, onboard_control_sensors_health, load, voltage_battery, current_battery, battery_remaining, drop_rate_comm, errors_comm, errors_count1, errors_count2, errors_count3, errors_count4) {

    this.format = '<IIIHHhHHHHHHb';
    this.id = mavlink.MAVLINK_MSG_ID_SYS_STATUS;
    this.order_map = [0, 1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11];
    this.crc_extra = 124;
    this.name = 'SYS_STATUS';

    this.fieldnames = ['onboard_control_sensors_present', 'onboard_control_sensors_enabled', 'onboard_control_sensors_health', 'load', 'voltage_battery', 'current_battery', 'battery_remaining', 'drop_rate_comm', 'errors_comm', 'errors_count1', 'errors_count2', 'errors_count3', 'errors_count4'];


    this.set(arguments);

}
        
mavlink.messages.sys_status.prototype = new mavlink.message;

mavlink.messages.sys_status.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.onboard_control_sensors_present, this.onboard_control_sensors_enabled, this.onboard_control_sensors_health, this.load, this.voltage_battery, this.current_battery, this.drop_rate_comm, this.errors_comm, this.errors_count1, this.errors_count2, this.errors_count3, this.errors_count4, this.battery_remaining]));
}

/* 
The system time is the time of the master clock, typically the
computer clock of the main onboard computer.

                time_unix_usec            : Timestamp of the master clock in microseconds since UNIX epoch. (uint64_t)
                time_boot_ms              : Timestamp of the component clock since boot time in milliseconds. (uint32_t)

*/
mavlink.messages.system_time = function(time_unix_usec, time_boot_ms) {

    this.format = '<dI';
    this.id = mavlink.MAVLINK_MSG_ID_SYSTEM_TIME;
    this.order_map = [0, 1];
    this.crc_extra = 137;
    this.name = 'SYSTEM_TIME';

    this.fieldnames = ['time_unix_usec', 'time_boot_ms'];


    this.set(arguments);

}
        
mavlink.messages.system_time.prototype = new mavlink.message;

mavlink.messages.system_time.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_unix_usec, this.time_boot_ms]));
}

/* 
A ping message either requesting or responding to a ping. This allows
to measure the system latencies, including serial port, radio modem
and UDP connections.

                time_usec                 : Unix timestamp in microseconds (uint64_t)
                seq                       : PING sequence (uint32_t)
                target_system             : 0: request ping from all receiving systems, if greater than 0: message is a ping response and number is the system id of the requesting system (uint8_t)
                target_component          : 0: request ping from all receiving components, if greater than 0: message is a ping response and number is the system id of the requesting system (uint8_t)

*/
mavlink.messages.ping = function(time_usec, seq, target_system, target_component) {

    this.format = '<dIBB';
    this.id = mavlink.MAVLINK_MSG_ID_PING;
    this.order_map = [0, 1, 2, 3];
    this.crc_extra = 237;
    this.name = 'PING';

    this.fieldnames = ['time_usec', 'seq', 'target_system', 'target_component'];


    this.set(arguments);

}
        
mavlink.messages.ping.prototype = new mavlink.message;

mavlink.messages.ping.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.seq, this.target_system, this.target_component]));
}

/* 
Request to control this MAV

                target_system             : System the GCS requests control for (uint8_t)
                control_request           : 0: request control of this MAV, 1: Release control of this MAV (uint8_t)
                version                   : 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch. (uint8_t)
                passkey                   : Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-" (char)

*/
mavlink.messages.change_operator_control = function(target_system, control_request, version, passkey) {

    this.format = '<BBB25s';
    this.id = mavlink.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL;
    this.order_map = [0, 1, 2, 3];
    this.crc_extra = 217;
    this.name = 'CHANGE_OPERATOR_CONTROL';

    this.fieldnames = ['target_system', 'control_request', 'version', 'passkey'];


    this.set(arguments);

}
        
mavlink.messages.change_operator_control.prototype = new mavlink.message;

mavlink.messages.change_operator_control.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.target_system, this.control_request, this.version, this.passkey]));
}

/* 
Accept / deny control of this MAV

                gcs_system_id             : ID of the GCS this message (uint8_t)
                control_request           : 0: request control of this MAV, 1: Release control of this MAV (uint8_t)
                ack                       : 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control (uint8_t)

*/
mavlink.messages.change_operator_control_ack = function(gcs_system_id, control_request, ack) {

    this.format = '<BBB';
    this.id = mavlink.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK;
    this.order_map = [0, 1, 2];
    this.crc_extra = 104;
    this.name = 'CHANGE_OPERATOR_CONTROL_ACK';

    this.fieldnames = ['gcs_system_id', 'control_request', 'ack'];


    this.set(arguments);

}
        
mavlink.messages.change_operator_control_ack.prototype = new mavlink.message;

mavlink.messages.change_operator_control_ack.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.gcs_system_id, this.control_request, this.ack]));
}

/* 
Emit an encrypted signature / key identifying this system. PLEASE
NOTE: This protocol has been kept simple, so transmitting the key
requires an encrypted channel for true safety.

                key                       : key (char)

*/
mavlink.messages.auth_key = function(key) {

    this.format = '<32s';
    this.id = mavlink.MAVLINK_MSG_ID_AUTH_KEY;
    this.order_map = [0];
    this.crc_extra = 119;
    this.name = 'AUTH_KEY';

    this.fieldnames = ['key'];


    this.set(arguments);

}
        
mavlink.messages.auth_key.prototype = new mavlink.message;

mavlink.messages.auth_key.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.key]));
}

/* 
Set the system mode, as defined by enum MAV_MODE. There is no target
component id as the mode is by definition for the overall aircraft,
not only for one component.

                target_system             : The system setting the mode (uint8_t)
                base_mode                 : The new base mode (uint8_t)
                custom_mode               : The new autopilot-specific mode. This field can be ignored by an autopilot. (uint32_t)

*/
mavlink.messages.set_mode = function(target_system, base_mode, custom_mode) {

    this.format = '<IBB';
    this.id = mavlink.MAVLINK_MSG_ID_SET_MODE;
    this.order_map = [1, 2, 0];
    this.crc_extra = 89;
    this.name = 'SET_MODE';

    this.fieldnames = ['target_system', 'base_mode', 'custom_mode'];


    this.set(arguments);

}
        
mavlink.messages.set_mode.prototype = new mavlink.message;

mavlink.messages.set_mode.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.custom_mode, this.target_system, this.base_mode]));
}

/* 
Request to read the onboard parameter with the param_id string id.
Onboard parameters are stored as key[const char*] -> value[float].
This allows to send a parameter to any other component (such as the
GCS) without the need of previous knowledge of possible parameter
names. Thus the same GCS can store different parameters for different
autopilots. See also http://qgroundcontrol.org/parameter_interface for
a full documentation of QGroundControl and IMU code.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored) (int16_t)

*/
mavlink.messages.param_request_read = function(target_system, target_component, param_id, param_index) {

    this.format = '<hBB16s';
    this.id = mavlink.MAVLINK_MSG_ID_PARAM_REQUEST_READ;
    this.order_map = [1, 2, 3, 0];
    this.crc_extra = 214;
    this.name = 'PARAM_REQUEST_READ';

    this.fieldnames = ['target_system', 'target_component', 'param_id', 'param_index'];


    this.set(arguments);

}
        
mavlink.messages.param_request_read.prototype = new mavlink.message;

mavlink.messages.param_request_read.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.param_index, this.target_system, this.target_component, this.param_id]));
}

/* 
Request all parameters of this component. After his request, all
parameters are emitted.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
mavlink.messages.param_request_list = function(target_system, target_component) {

    this.format = '<BB';
    this.id = mavlink.MAVLINK_MSG_ID_PARAM_REQUEST_LIST;
    this.order_map = [0, 1];
    this.crc_extra = 159;
    this.name = 'PARAM_REQUEST_LIST';

    this.fieldnames = ['target_system', 'target_component'];


    this.set(arguments);

}
        
mavlink.messages.param_request_list.prototype = new mavlink.message;

mavlink.messages.param_request_list.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.target_system, this.target_component]));
}

/* 
Emit the value of a onboard parameter. The inclusion of param_count
and param_index in the message allows the recipient to keep track of
received parameters and allows him to re-request missing parameters
after a loss or timeout.

                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_value               : Onboard parameter value (float)
                param_type                : Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types. (uint8_t)
                param_count               : Total number of onboard parameters (uint16_t)
                param_index               : Index of this onboard parameter (uint16_t)

*/
mavlink.messages.param_value = function(param_id, param_value, param_type, param_count, param_index) {

    this.format = '<fHH16sB';
    this.id = mavlink.MAVLINK_MSG_ID_PARAM_VALUE;
    this.order_map = [3, 0, 4, 1, 2];
    this.crc_extra = 220;
    this.name = 'PARAM_VALUE';

    this.fieldnames = ['param_id', 'param_value', 'param_type', 'param_count', 'param_index'];


    this.set(arguments);

}
        
mavlink.messages.param_value.prototype = new mavlink.message;

mavlink.messages.param_value.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.param_value, this.param_count, this.param_index, this.param_id, this.param_type]));
}

/* 
Set a parameter value TEMPORARILY to RAM. It will be reset to default
on system reboot. Send the ACTION MAV_ACTION_STORAGE_WRITE to
PERMANENTLY write the RAM contents to EEPROM. IMPORTANT: The receiving
component should acknowledge the new parameter value by sending a
param_value message to all communication partners. This will also
ensure that multiple GCS all have an up-to-date list of all
parameters. If the sending GCS did not receive a PARAM_VALUE message
within its timeout time, it should re-send the PARAM_SET message.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_value               : Onboard parameter value (float)
                param_type                : Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types. (uint8_t)

*/
mavlink.messages.param_set = function(target_system, target_component, param_id, param_value, param_type) {

    this.format = '<fBB16sB';
    this.id = mavlink.MAVLINK_MSG_ID_PARAM_SET;
    this.order_map = [1, 2, 3, 0, 4];
    this.crc_extra = 168;
    this.name = 'PARAM_SET';

    this.fieldnames = ['target_system', 'target_component', 'param_id', 'param_value', 'param_type'];


    this.set(arguments);

}
        
mavlink.messages.param_set.prototype = new mavlink.message;

mavlink.messages.param_set.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.param_value, this.target_system, this.target_component, this.param_id, this.param_type]));
}

/* 
The global position, as returned by the Global Positioning System
(GPS). This is                 NOT the global position estimate of the
sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for
the global position estimate. Coordinate frame is right-handed, Z-axis
up (GPS frame).

                time_usec                 : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix. (uint8_t)
                lat                       : Latitude in 1E7 degrees (int32_t)
                lon                       : Longitude in 1E7 degrees (int32_t)
                alt                       : Altitude in 1E3 meters (millimeters) above MSL (int32_t)
                eph                       : GPS HDOP horizontal dilution of position in cm (m*100). If unknown, set to: 65535 (uint16_t)
                epv                       : GPS VDOP horizontal dilution of position in cm (m*100). If unknown, set to: 65535 (uint16_t)
                vel                       : GPS ground speed (m/s * 100). If unknown, set to: 65535 (uint16_t)
                cog                       : Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: 65535 (uint16_t)
                satellites_visible        : Number of satellites visible. If unknown, set to 255 (uint8_t)

*/
mavlink.messages.gps_raw_int = function(time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible) {

    this.format = '<diiiHHHHBB';
    this.id = mavlink.MAVLINK_MSG_ID_GPS_RAW_INT;
    this.order_map = [0, 8, 1, 2, 3, 4, 5, 6, 7, 9];
    this.crc_extra = 24;
    this.name = 'GPS_RAW_INT';

    this.fieldnames = ['time_usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'epv', 'vel', 'cog', 'satellites_visible'];


    this.set(arguments);

}
        
mavlink.messages.gps_raw_int.prototype = new mavlink.message;

mavlink.messages.gps_raw_int.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.lat, this.lon, this.alt, this.eph, this.epv, this.vel, this.cog, this.fix_type, this.satellites_visible]));
}

/* 
The positioning status, as reported by GPS. This message is intended
to display status information about each satellite visible to the
receiver. See message GLOBAL_POSITION for the global position
estimate. This message can contain information for up to 20
satellites.

                satellites_visible        : Number of satellites visible (uint8_t)
                satellite_prn             : Global satellite ID (uint8_t)
                satellite_used            : 0: Satellite not used, 1: used for localization (uint8_t)
                satellite_elevation        : Elevation (0: right on top of receiver, 90: on the horizon) of satellite (uint8_t)
                satellite_azimuth         : Direction of satellite, 0: 0 deg, 255: 360 deg. (uint8_t)
                satellite_snr             : Signal to noise ratio of satellite (uint8_t)

*/
mavlink.messages.gps_status = function(satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr) {

    this.format = '<B20s20s20s20s20s';
    this.id = mavlink.MAVLINK_MSG_ID_GPS_STATUS;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.crc_extra = 23;
    this.name = 'GPS_STATUS';

    this.fieldnames = ['satellites_visible', 'satellite_prn', 'satellite_used', 'satellite_elevation', 'satellite_azimuth', 'satellite_snr'];


    this.set(arguments);

}
        
mavlink.messages.gps_status.prototype = new mavlink.message;

mavlink.messages.gps_status.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.satellites_visible, this.satellite_prn, this.satellite_used, this.satellite_elevation, this.satellite_azimuth, this.satellite_snr]));
}

/* 
The RAW IMU readings for the usual 9DOF sensor setup. This message
should contain the scaled values to the described units

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                xacc                      : X acceleration (mg) (int16_t)
                yacc                      : Y acceleration (mg) (int16_t)
                zacc                      : Z acceleration (mg) (int16_t)
                xgyro                     : Angular speed around X axis (millirad /sec) (int16_t)
                ygyro                     : Angular speed around Y axis (millirad /sec) (int16_t)
                zgyro                     : Angular speed around Z axis (millirad /sec) (int16_t)
                xmag                      : X Magnetic field (milli tesla) (int16_t)
                ymag                      : Y Magnetic field (milli tesla) (int16_t)
                zmag                      : Z Magnetic field (milli tesla) (int16_t)

*/
mavlink.messages.scaled_imu = function(time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag) {

    this.format = '<Ihhhhhhhhh';
    this.id = mavlink.MAVLINK_MSG_ID_SCALED_IMU;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.crc_extra = 170;
    this.name = 'SCALED_IMU';

    this.fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag'];


    this.set(arguments);

}
        
mavlink.messages.scaled_imu.prototype = new mavlink.message;

mavlink.messages.scaled_imu.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag]));
}

/* 
The RAW IMU readings for the usual 9DOF sensor setup. This message
should always contain the true raw values without any scaling to allow
data capture and system debugging.

                time_usec                 : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                xacc                      : X acceleration (raw) (int16_t)
                yacc                      : Y acceleration (raw) (int16_t)
                zacc                      : Z acceleration (raw) (int16_t)
                xgyro                     : Angular speed around X axis (raw) (int16_t)
                ygyro                     : Angular speed around Y axis (raw) (int16_t)
                zgyro                     : Angular speed around Z axis (raw) (int16_t)
                xmag                      : X Magnetic field (raw) (int16_t)
                ymag                      : Y Magnetic field (raw) (int16_t)
                zmag                      : Z Magnetic field (raw) (int16_t)

*/
mavlink.messages.raw_imu = function(time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag) {

    this.format = '<dhhhhhhhhh';
    this.id = mavlink.MAVLINK_MSG_ID_RAW_IMU;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.crc_extra = 144;
    this.name = 'RAW_IMU';

    this.fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag'];


    this.set(arguments);

}
        
mavlink.messages.raw_imu.prototype = new mavlink.message;

mavlink.messages.raw_imu.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag]));
}

/* 
The RAW pressure readings for the typical setup of one absolute
pressure and one differential pressure sensor. The sensor values
should be the raw, UNSCALED ADC values.

                time_usec                 : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                press_abs                 : Absolute pressure (raw) (int16_t)
                press_diff1               : Differential pressure 1 (raw) (int16_t)
                press_diff2               : Differential pressure 2 (raw) (int16_t)
                temperature               : Raw Temperature measurement (raw) (int16_t)

*/
mavlink.messages.raw_pressure = function(time_usec, press_abs, press_diff1, press_diff2, temperature) {

    this.format = '<dhhhh';
    this.id = mavlink.MAVLINK_MSG_ID_RAW_PRESSURE;
    this.order_map = [0, 1, 2, 3, 4];
    this.crc_extra = 67;
    this.name = 'RAW_PRESSURE';

    this.fieldnames = ['time_usec', 'press_abs', 'press_diff1', 'press_diff2', 'temperature'];


    this.set(arguments);

}
        
mavlink.messages.raw_pressure.prototype = new mavlink.message;

mavlink.messages.raw_pressure.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.press_abs, this.press_diff1, this.press_diff2, this.temperature]));
}

/* 
The pressure readings for the typical setup of one absolute and
differential pressure sensor. The units are as specified in each
field.

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                press_abs                 : Absolute pressure (hectopascal) (float)
                press_diff                : Differential pressure 1 (hectopascal) (float)
                temperature               : Temperature measurement (0.01 degrees celsius) (int16_t)

*/
mavlink.messages.scaled_pressure = function(time_boot_ms, press_abs, press_diff, temperature) {

    this.format = '<Iffh';
    this.id = mavlink.MAVLINK_MSG_ID_SCALED_PRESSURE;
    this.order_map = [0, 1, 2, 3];
    this.crc_extra = 115;
    this.name = 'SCALED_PRESSURE';

    this.fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temperature'];


    this.set(arguments);

}
        
mavlink.messages.scaled_pressure.prototype = new mavlink.message;

mavlink.messages.scaled_pressure.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.press_abs, this.press_diff, this.temperature]));
}

/* 
The attitude in the aeronautical frame (right-handed, Z-down, X-front,
Y-right).

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                roll                      : Roll angle (rad, -pi..+pi) (float)
                pitch                     : Pitch angle (rad, -pi..+pi) (float)
                yaw                       : Yaw angle (rad, -pi..+pi) (float)
                rollspeed                 : Roll angular speed (rad/s) (float)
                pitchspeed                : Pitch angular speed (rad/s) (float)
                yawspeed                  : Yaw angular speed (rad/s) (float)

*/
mavlink.messages.attitude = function(time_boot_ms, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed) {

    this.format = '<Iffffff';
    this.id = mavlink.MAVLINK_MSG_ID_ATTITUDE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.crc_extra = 39;
    this.name = 'ATTITUDE';

    this.fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'rollspeed', 'pitchspeed', 'yawspeed'];


    this.set(arguments);

}
        
mavlink.messages.attitude.prototype = new mavlink.message;

mavlink.messages.attitude.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.roll, this.pitch, this.yaw, this.rollspeed, this.pitchspeed, this.yawspeed]));
}

/* 
The attitude in the aeronautical frame (right-handed, Z-down, X-front,
Y-right), expressed as quaternion.

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                q1                        : Quaternion component 1 (float)
                q2                        : Quaternion component 2 (float)
                q3                        : Quaternion component 3 (float)
                q4                        : Quaternion component 4 (float)
                rollspeed                 : Roll angular speed (rad/s) (float)
                pitchspeed                : Pitch angular speed (rad/s) (float)
                yawspeed                  : Yaw angular speed (rad/s) (float)

*/
mavlink.messages.attitude_quaternion = function(time_boot_ms, q1, q2, q3, q4, rollspeed, pitchspeed, yawspeed) {

    this.format = '<Ifffffff';
    this.id = mavlink.MAVLINK_MSG_ID_ATTITUDE_QUATERNION;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7];
    this.crc_extra = 246;
    this.name = 'ATTITUDE_QUATERNION';

    this.fieldnames = ['time_boot_ms', 'q1', 'q2', 'q3', 'q4', 'rollspeed', 'pitchspeed', 'yawspeed'];


    this.set(arguments);

}
        
mavlink.messages.attitude_quaternion.prototype = new mavlink.message;

mavlink.messages.attitude_quaternion.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.q1, this.q2, this.q3, this.q4, this.rollspeed, this.pitchspeed, this.yawspeed]));
}

/* 
The filtered local position (e.g. fused computer vision and
accelerometers). Coordinate frame is right-handed, Z-axis down
(aeronautical frame, NED / north-east-down convention)

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                x                         : X Position (float)
                y                         : Y Position (float)
                z                         : Z Position (float)
                vx                        : X Speed (float)
                vy                        : Y Speed (float)
                vz                        : Z Speed (float)

*/
mavlink.messages.local_position_ned = function(time_boot_ms, x, y, z, vx, vy, vz) {

    this.format = '<Iffffff';
    this.id = mavlink.MAVLINK_MSG_ID_LOCAL_POSITION_NED;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.crc_extra = 185;
    this.name = 'LOCAL_POSITION_NED';

    this.fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'vx', 'vy', 'vz'];


    this.set(arguments);

}
        
mavlink.messages.local_position_ned.prototype = new mavlink.message;

mavlink.messages.local_position_ned.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.x, this.y, this.z, this.vx, this.vy, this.vz]));
}

/* 
The filtered global position (e.g. fused GPS and accelerometers). The
position is in GPS-frame (right-handed, Z-up). It                is
designed as scaled integer message since the resolution of float is
not sufficient.

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                lat                       : Latitude, expressed as * 1E7 (int32_t)
                lon                       : Longitude, expressed as * 1E7 (int32_t)
                alt                       : Altitude in meters, expressed as * 1000 (millimeters), above MSL (int32_t)
                relative_alt              : Altitude above ground in meters, expressed as * 1000 (millimeters) (int32_t)
                vx                        : Ground X Speed (Latitude), expressed as m/s * 100 (int16_t)
                vy                        : Ground Y Speed (Longitude), expressed as m/s * 100 (int16_t)
                vz                        : Ground Z Speed (Altitude), expressed as m/s * 100 (int16_t)
                hdg                       : Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: 65535 (uint16_t)

*/
mavlink.messages.global_position_int = function(time_boot_ms, lat, lon, alt, relative_alt, vx, vy, vz, hdg) {

    this.format = '<IiiiihhhH';
    this.id = mavlink.MAVLINK_MSG_ID_GLOBAL_POSITION_INT;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    this.crc_extra = 104;
    this.name = 'GLOBAL_POSITION_INT';

    this.fieldnames = ['time_boot_ms', 'lat', 'lon', 'alt', 'relative_alt', 'vx', 'vy', 'vz', 'hdg'];


    this.set(arguments);

}
        
mavlink.messages.global_position_int.prototype = new mavlink.message;

mavlink.messages.global_position_int.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.lat, this.lon, this.alt, this.relative_alt, this.vx, this.vy, this.vz, this.hdg]));
}

/* 
The scaled values of the RC channels received. (-100%) -10000, (0%) 0,
(100%) 10000. Channels that are inactive should be set to 65535.

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                port                      : Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows for more than 8 servos. (uint8_t)
                chan1_scaled              : RC channel 1 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) 32767. (int16_t)
                chan2_scaled              : RC channel 2 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) 32767. (int16_t)
                chan3_scaled              : RC channel 3 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) 32767. (int16_t)
                chan4_scaled              : RC channel 4 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) 32767. (int16_t)
                chan5_scaled              : RC channel 5 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) 32767. (int16_t)
                chan6_scaled              : RC channel 6 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) 32767. (int16_t)
                chan7_scaled              : RC channel 7 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) 32767. (int16_t)
                chan8_scaled              : RC channel 8 value scaled, (-100%) -10000, (0%) 0, (100%) 10000, (invalid) 32767. (int16_t)
                rssi                      : Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown. (uint8_t)

*/
mavlink.messages.rc_channels_scaled = function(time_boot_ms, port, chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi) {

    this.format = '<IhhhhhhhhBB';
    this.id = mavlink.MAVLINK_MSG_ID_RC_CHANNELS_SCALED;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10];
    this.crc_extra = 237;
    this.name = 'RC_CHANNELS_SCALED';

    this.fieldnames = ['time_boot_ms', 'port', 'chan1_scaled', 'chan2_scaled', 'chan3_scaled', 'chan4_scaled', 'chan5_scaled', 'chan6_scaled', 'chan7_scaled', 'chan8_scaled', 'rssi'];


    this.set(arguments);

}
        
mavlink.messages.rc_channels_scaled.prototype = new mavlink.message;

mavlink.messages.rc_channels_scaled.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.chan1_scaled, this.chan2_scaled, this.chan3_scaled, this.chan4_scaled, this.chan5_scaled, this.chan6_scaled, this.chan7_scaled, this.chan8_scaled, this.port, this.rssi]));
}

/* 
The RAW values of the RC channels received. The standard PPM
modulation is as follows: 1000 microseconds: 0%, 2000 microseconds:
100%. Individual receivers/transmitters might violate this
specification.

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                port                      : Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows for more than 8 servos. (uint8_t)
                chan1_raw                 : RC channel 1 value, in microseconds. A value of 65535 implies the channel is unused. (uint16_t)
                chan2_raw                 : RC channel 2 value, in microseconds. A value of 65535 implies the channel is unused. (uint16_t)
                chan3_raw                 : RC channel 3 value, in microseconds. A value of 65535 implies the channel is unused. (uint16_t)
                chan4_raw                 : RC channel 4 value, in microseconds. A value of 65535 implies the channel is unused. (uint16_t)
                chan5_raw                 : RC channel 5 value, in microseconds. A value of 65535 implies the channel is unused. (uint16_t)
                chan6_raw                 : RC channel 6 value, in microseconds. A value of 65535 implies the channel is unused. (uint16_t)
                chan7_raw                 : RC channel 7 value, in microseconds. A value of 65535 implies the channel is unused. (uint16_t)
                chan8_raw                 : RC channel 8 value, in microseconds. A value of 65535 implies the channel is unused. (uint16_t)
                rssi                      : Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown. (uint8_t)

*/
mavlink.messages.rc_channels_raw = function(time_boot_ms, port, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi) {

    this.format = '<IHHHHHHHHBB';
    this.id = mavlink.MAVLINK_MSG_ID_RC_CHANNELS_RAW;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10];
    this.crc_extra = 244;
    this.name = 'RC_CHANNELS_RAW';

    this.fieldnames = ['time_boot_ms', 'port', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw', 'rssi'];


    this.set(arguments);

}
        
mavlink.messages.rc_channels_raw.prototype = new mavlink.message;

mavlink.messages.rc_channels_raw.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.chan1_raw, this.chan2_raw, this.chan3_raw, this.chan4_raw, this.chan5_raw, this.chan6_raw, this.chan7_raw, this.chan8_raw, this.port, this.rssi]));
}

/* 
The RAW values of the servo outputs (for RC input from the remote, use
the RC_CHANNELS messages). The standard PPM modulation is as follows:
1000 microseconds: 0%, 2000 microseconds: 100%.

                time_usec                 : Timestamp (microseconds since system boot) (uint32_t)
                port                      : Servo output port (set of 8 outputs = 1 port). Most MAVs will just use one, but this allows to encode more than 8 servos. (uint8_t)
                servo1_raw                : Servo output 1 value, in microseconds (uint16_t)
                servo2_raw                : Servo output 2 value, in microseconds (uint16_t)
                servo3_raw                : Servo output 3 value, in microseconds (uint16_t)
                servo4_raw                : Servo output 4 value, in microseconds (uint16_t)
                servo5_raw                : Servo output 5 value, in microseconds (uint16_t)
                servo6_raw                : Servo output 6 value, in microseconds (uint16_t)
                servo7_raw                : Servo output 7 value, in microseconds (uint16_t)
                servo8_raw                : Servo output 8 value, in microseconds (uint16_t)

*/
mavlink.messages.servo_output_raw = function(time_usec, port, servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw) {

    this.format = '<IHHHHHHHHB';
    this.id = mavlink.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8];
    this.crc_extra = 222;
    this.name = 'SERVO_OUTPUT_RAW';

    this.fieldnames = ['time_usec', 'port', 'servo1_raw', 'servo2_raw', 'servo3_raw', 'servo4_raw', 'servo5_raw', 'servo6_raw', 'servo7_raw', 'servo8_raw'];


    this.set(arguments);

}
        
mavlink.messages.servo_output_raw.prototype = new mavlink.message;

mavlink.messages.servo_output_raw.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.servo1_raw, this.servo2_raw, this.servo3_raw, this.servo4_raw, this.servo5_raw, this.servo6_raw, this.servo7_raw, this.servo8_raw, this.port]));
}

/* 
Request a partial list of mission items from the system/component.
http://qgroundcontrol.org/mavlink/waypoint_protocol. If start and end
index are the same, just send one waypoint.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                start_index               : Start index, 0 by default (int16_t)
                end_index                 : End index, -1 by default (-1: send list to end). Else a valid index of the list (int16_t)

*/
mavlink.messages.mission_request_partial_list = function(target_system, target_component, start_index, end_index) {

    this.format = '<hhBB';
    this.id = mavlink.MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST;
    this.order_map = [2, 3, 0, 1];
    this.crc_extra = 212;
    this.name = 'MISSION_REQUEST_PARTIAL_LIST';

    this.fieldnames = ['target_system', 'target_component', 'start_index', 'end_index'];


    this.set(arguments);

}
        
mavlink.messages.mission_request_partial_list.prototype = new mavlink.message;

mavlink.messages.mission_request_partial_list.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.start_index, this.end_index, this.target_system, this.target_component]));
}

/* 
This message is sent to the MAV to write a partial list. If start
index == end index, only one item will be transmitted / updated. If
the start index is NOT 0 and above the current list size, this request
should be REJECTED!

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                start_index               : Start index, 0 by default and smaller / equal to the largest index of the current onboard list. (int16_t)
                end_index                 : End index, equal or greater than start index. (int16_t)

*/
mavlink.messages.mission_write_partial_list = function(target_system, target_component, start_index, end_index) {

    this.format = '<hhBB';
    this.id = mavlink.MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST;
    this.order_map = [2, 3, 0, 1];
    this.crc_extra = 9;
    this.name = 'MISSION_WRITE_PARTIAL_LIST';

    this.fieldnames = ['target_system', 'target_component', 'start_index', 'end_index'];


    this.set(arguments);

}
        
mavlink.messages.mission_write_partial_list.prototype = new mavlink.message;

mavlink.messages.mission_write_partial_list.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.start_index, this.end_index, this.target_system, this.target_component]));
}

/* 
Message encoding a mission item. This message is emitted to announce
the presence of a mission item and to set a mission item on the
system. The mission item can be either in x, y, z meters (type: LOCAL)
or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed
(NED), global frame is Z-up, right handed (ENU). See also
http://qgroundcontrol.org/mavlink/waypoint_protocol.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)
                frame                     : The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h (uint8_t)
                command                   : The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs (uint16_t)
                current                   : false:0, true:1 (uint8_t)
                autocontinue              : autocontinue to next wp (uint8_t)
                param1                    : PARAM1 / For NAV command MISSIONs: Radius in which the MISSION is accepted as reached, in meters (float)
                param2                    : PARAM2 / For NAV command MISSIONs: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds (float)
                param3                    : PARAM3 / For LOITER command MISSIONs: Orbit to circle around the MISSION, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise. (float)
                param4                    : PARAM4 / For NAV and LOITER command MISSIONs: Yaw orientation in degrees, [0..360] 0 = NORTH (float)
                x                         : PARAM5 / local: x position, global: latitude (float)
                y                         : PARAM6 / y position: global: longitude (float)
                z                         : PARAM7 / z position: global: altitude (float)

*/
mavlink.messages.mission_item = function(target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z) {

    this.format = '<fffffffHHBBBBB';
    this.id = mavlink.MAVLINK_MSG_ID_MISSION_ITEM;
    this.order_map = [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6];
    this.crc_extra = 254;
    this.name = 'MISSION_ITEM';

    this.fieldnames = ['target_system', 'target_component', 'seq', 'frame', 'command', 'current', 'autocontinue', 'param1', 'param2', 'param3', 'param4', 'x', 'y', 'z'];


    this.set(arguments);

}
        
mavlink.messages.mission_item.prototype = new mavlink.message;

mavlink.messages.mission_item.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.param1, this.param2, this.param3, this.param4, this.x, this.y, this.z, this.seq, this.command, this.target_system, this.target_component, this.frame, this.current, this.autocontinue]));
}

/* 
Request the information of the mission item with the sequence number
seq. The response of the system to this message should be a
MISSION_ITEM message.
http://qgroundcontrol.org/mavlink/waypoint_protocol

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)

*/
mavlink.messages.mission_request = function(target_system, target_component, seq) {

    this.format = '<HBB';
    this.id = mavlink.MAVLINK_MSG_ID_MISSION_REQUEST;
    this.order_map = [1, 2, 0];
    this.crc_extra = 230;
    this.name = 'MISSION_REQUEST';

    this.fieldnames = ['target_system', 'target_component', 'seq'];


    this.set(arguments);

}
        
mavlink.messages.mission_request.prototype = new mavlink.message;

mavlink.messages.mission_request.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.seq, this.target_system, this.target_component]));
}

/* 
Set the mission item with sequence number seq as current item. This
means that the MAV will continue to this mission item on the shortest
path (not following the mission items in-between).

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)

*/
mavlink.messages.mission_set_current = function(target_system, target_component, seq) {

    this.format = '<HBB';
    this.id = mavlink.MAVLINK_MSG_ID_MISSION_SET_CURRENT;
    this.order_map = [1, 2, 0];
    this.crc_extra = 28;
    this.name = 'MISSION_SET_CURRENT';

    this.fieldnames = ['target_system', 'target_component', 'seq'];


    this.set(arguments);

}
        
mavlink.messages.mission_set_current.prototype = new mavlink.message;

mavlink.messages.mission_set_current.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.seq, this.target_system, this.target_component]));
}

/* 
Message that announces the sequence number of the current active
mission item. The MAV will fly towards this mission item.

                seq                       : Sequence (uint16_t)

*/
mavlink.messages.mission_current = function(seq) {

    this.format = '<H';
    this.id = mavlink.MAVLINK_MSG_ID_MISSION_CURRENT;
    this.order_map = [0];
    this.crc_extra = 28;
    this.name = 'MISSION_CURRENT';

    this.fieldnames = ['seq'];


    this.set(arguments);

}
        
mavlink.messages.mission_current.prototype = new mavlink.message;

mavlink.messages.mission_current.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.seq]));
}

/* 
Request the overall list of mission items from the system/component.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
mavlink.messages.mission_request_list = function(target_system, target_component) {

    this.format = '<BB';
    this.id = mavlink.MAVLINK_MSG_ID_MISSION_REQUEST_LIST;
    this.order_map = [0, 1];
    this.crc_extra = 132;
    this.name = 'MISSION_REQUEST_LIST';

    this.fieldnames = ['target_system', 'target_component'];


    this.set(arguments);

}
        
mavlink.messages.mission_request_list.prototype = new mavlink.message;

mavlink.messages.mission_request_list.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.target_system, this.target_component]));
}

/* 
This message is emitted as response to MISSION_REQUEST_LIST by the MAV
and to initiate a write transaction. The GCS can then request the
individual mission item based on the knowledge of the total number of
MISSIONs.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                count                     : Number of mission items in the sequence (uint16_t)

*/
mavlink.messages.mission_count = function(target_system, target_component, count) {

    this.format = '<HBB';
    this.id = mavlink.MAVLINK_MSG_ID_MISSION_COUNT;
    this.order_map = [1, 2, 0];
    this.crc_extra = 221;
    this.name = 'MISSION_COUNT';

    this.fieldnames = ['target_system', 'target_component', 'count'];


    this.set(arguments);

}
        
mavlink.messages.mission_count.prototype = new mavlink.message;

mavlink.messages.mission_count.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.count, this.target_system, this.target_component]));
}

/* 
Delete all mission items at once.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
mavlink.messages.mission_clear_all = function(target_system, target_component) {

    this.format = '<BB';
    this.id = mavlink.MAVLINK_MSG_ID_MISSION_CLEAR_ALL;
    this.order_map = [0, 1];
    this.crc_extra = 232;
    this.name = 'MISSION_CLEAR_ALL';

    this.fieldnames = ['target_system', 'target_component'];


    this.set(arguments);

}
        
mavlink.messages.mission_clear_all.prototype = new mavlink.message;

mavlink.messages.mission_clear_all.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.target_system, this.target_component]));
}

/* 
A certain mission item has been reached. The system will either hold
this position (or circle on the orbit) or (if the autocontinue on the
WP was set) continue to the next MISSION.

                seq                       : Sequence (uint16_t)

*/
mavlink.messages.mission_item_reached = function(seq) {

    this.format = '<H';
    this.id = mavlink.MAVLINK_MSG_ID_MISSION_ITEM_REACHED;
    this.order_map = [0];
    this.crc_extra = 11;
    this.name = 'MISSION_ITEM_REACHED';

    this.fieldnames = ['seq'];


    this.set(arguments);

}
        
mavlink.messages.mission_item_reached.prototype = new mavlink.message;

mavlink.messages.mission_item_reached.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.seq]));
}

/* 
Ack message during MISSION handling. The type field states if this
message is a positive ack (type=0) or if an error happened (type=non-
zero).

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                type                      : See MAV_MISSION_RESULT enum (uint8_t)

*/
mavlink.messages.mission_ack = function(target_system, target_component, type) {

    this.format = '<BBB';
    this.id = mavlink.MAVLINK_MSG_ID_MISSION_ACK;
    this.order_map = [0, 1, 2];
    this.crc_extra = 153;
    this.name = 'MISSION_ACK';

    this.fieldnames = ['target_system', 'target_component', 'type'];


    this.set(arguments);

}
        
mavlink.messages.mission_ack.prototype = new mavlink.message;

mavlink.messages.mission_ack.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.target_system, this.target_component, this.type]));
}

/* 
As local waypoints exist, the global MISSION reference allows to
transform between the local coordinate frame and the global (GPS)
coordinate frame. This can be necessary when e.g. in- and outdoor
settings are connected and the MAV should move from in- to outdoor.

                target_system             : System ID (uint8_t)
                latitude                  : global position * 1E7 (int32_t)
                longitude                 : global position * 1E7 (int32_t)
                altitude                  : global position * 1000 (int32_t)

*/
mavlink.messages.set_gps_global_origin = function(target_system, latitude, longitude, altitude) {

    this.format = '<iiiB';
    this.id = mavlink.MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN;
    this.order_map = [3, 0, 1, 2];
    this.crc_extra = 41;
    this.name = 'SET_GPS_GLOBAL_ORIGIN';

    this.fieldnames = ['target_system', 'latitude', 'longitude', 'altitude'];


    this.set(arguments);

}
        
mavlink.messages.set_gps_global_origin.prototype = new mavlink.message;

mavlink.messages.set_gps_global_origin.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.latitude, this.longitude, this.altitude, this.target_system]));
}

/* 
Once the MAV sets a new GPS-Local correspondence, this message
announces the origin (0,0,0) position

                latitude                  : Latitude (WGS84), expressed as * 1E7 (int32_t)
                longitude                 : Longitude (WGS84), expressed as * 1E7 (int32_t)
                altitude                  : Altitude(WGS84), expressed as * 1000 (int32_t)

*/
mavlink.messages.gps_global_origin = function(latitude, longitude, altitude) {

    this.format = '<iii';
    this.id = mavlink.MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN;
    this.order_map = [0, 1, 2];
    this.crc_extra = 39;
    this.name = 'GPS_GLOBAL_ORIGIN';

    this.fieldnames = ['latitude', 'longitude', 'altitude'];


    this.set(arguments);

}
        
mavlink.messages.gps_global_origin.prototype = new mavlink.message;

mavlink.messages.gps_global_origin.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.latitude, this.longitude, this.altitude]));
}

/* 
Set the setpoint for a local position controller. This is the position
in local coordinates the MAV should fly to. This message is sent by
the path/MISSION planner to the onboard position controller. As some
MAVs have a degree of freedom in yaw (e.g. all
helicopters/quadrotors), the desired yaw angle is part of the message.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                coordinate_frame          : Coordinate frame - valid values are only MAV_FRAME_LOCAL_NED or MAV_FRAME_LOCAL_ENU (uint8_t)
                x                         : x position (float)
                y                         : y position (float)
                z                         : z position (float)
                yaw                       : Desired yaw angle (float)

*/
mavlink.messages.set_local_position_setpoint = function(target_system, target_component, coordinate_frame, x, y, z, yaw) {

    this.format = '<ffffBBB';
    this.id = mavlink.MAVLINK_MSG_ID_SET_LOCAL_POSITION_SETPOINT;
    this.order_map = [4, 5, 6, 0, 1, 2, 3];
    this.crc_extra = 214;
    this.name = 'SET_LOCAL_POSITION_SETPOINT';

    this.fieldnames = ['target_system', 'target_component', 'coordinate_frame', 'x', 'y', 'z', 'yaw'];


    this.set(arguments);

}
        
mavlink.messages.set_local_position_setpoint.prototype = new mavlink.message;

mavlink.messages.set_local_position_setpoint.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.x, this.y, this.z, this.yaw, this.target_system, this.target_component, this.coordinate_frame]));
}

/* 
Transmit the current local setpoint of the controller to other MAVs
(collision avoidance) and to the GCS.

                coordinate_frame          : Coordinate frame - valid values are only MAV_FRAME_LOCAL_NED or MAV_FRAME_LOCAL_ENU (uint8_t)
                x                         : x position (float)
                y                         : y position (float)
                z                         : z position (float)
                yaw                       : Desired yaw angle (float)

*/
mavlink.messages.local_position_setpoint = function(coordinate_frame, x, y, z, yaw) {

    this.format = '<ffffB';
    this.id = mavlink.MAVLINK_MSG_ID_LOCAL_POSITION_SETPOINT;
    this.order_map = [4, 0, 1, 2, 3];
    this.crc_extra = 223;
    this.name = 'LOCAL_POSITION_SETPOINT';

    this.fieldnames = ['coordinate_frame', 'x', 'y', 'z', 'yaw'];


    this.set(arguments);

}
        
mavlink.messages.local_position_setpoint.prototype = new mavlink.message;

mavlink.messages.local_position_setpoint.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.x, this.y, this.z, this.yaw, this.coordinate_frame]));
}

/* 
Transmit the current local setpoint of the controller to other MAVs
(collision avoidance) and to the GCS.

                coordinate_frame          : Coordinate frame - valid values are only MAV_FRAME_GLOBAL or MAV_FRAME_GLOBAL_RELATIVE_ALT (uint8_t)
                latitude                  : WGS84 Latitude position in degrees * 1E7 (int32_t)
                longitude                 : WGS84 Longitude position in degrees * 1E7 (int32_t)
                altitude                  : WGS84 Altitude in meters * 1000 (positive for up) (int32_t)
                yaw                       : Desired yaw angle in degrees * 100 (int16_t)

*/
mavlink.messages.global_position_setpoint_int = function(coordinate_frame, latitude, longitude, altitude, yaw) {

    this.format = '<iiihB';
    this.id = mavlink.MAVLINK_MSG_ID_GLOBAL_POSITION_SETPOINT_INT;
    this.order_map = [4, 0, 1, 2, 3];
    this.crc_extra = 141;
    this.name = 'GLOBAL_POSITION_SETPOINT_INT';

    this.fieldnames = ['coordinate_frame', 'latitude', 'longitude', 'altitude', 'yaw'];


    this.set(arguments);

}
        
mavlink.messages.global_position_setpoint_int.prototype = new mavlink.message;

mavlink.messages.global_position_setpoint_int.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.latitude, this.longitude, this.altitude, this.yaw, this.coordinate_frame]));
}

/* 
Set the current global position setpoint.

                coordinate_frame          : Coordinate frame - valid values are only MAV_FRAME_GLOBAL or MAV_FRAME_GLOBAL_RELATIVE_ALT (uint8_t)
                latitude                  : WGS84 Latitude position in degrees * 1E7 (int32_t)
                longitude                 : WGS84 Longitude position in degrees * 1E7 (int32_t)
                altitude                  : WGS84 Altitude in meters * 1000 (positive for up) (int32_t)
                yaw                       : Desired yaw angle in degrees * 100 (int16_t)

*/
mavlink.messages.set_global_position_setpoint_int = function(coordinate_frame, latitude, longitude, altitude, yaw) {

    this.format = '<iiihB';
    this.id = mavlink.MAVLINK_MSG_ID_SET_GLOBAL_POSITION_SETPOINT_INT;
    this.order_map = [4, 0, 1, 2, 3];
    this.crc_extra = 33;
    this.name = 'SET_GLOBAL_POSITION_SETPOINT_INT';

    this.fieldnames = ['coordinate_frame', 'latitude', 'longitude', 'altitude', 'yaw'];


    this.set(arguments);

}
        
mavlink.messages.set_global_position_setpoint_int.prototype = new mavlink.message;

mavlink.messages.set_global_position_setpoint_int.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.latitude, this.longitude, this.altitude, this.yaw, this.coordinate_frame]));
}

/* 
Set a safety zone (volume), which is defined by two corners of a cube.
This message can be used to tell the MAV which setpoints/MISSIONs to
accept and which to reject. Safety areas are often enforced by
national or competition regulations.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                frame                     : Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (uint8_t)
                p1x                       : x position 1 / Latitude 1 (float)
                p1y                       : y position 1 / Longitude 1 (float)
                p1z                       : z position 1 / Altitude 1 (float)
                p2x                       : x position 2 / Latitude 2 (float)
                p2y                       : y position 2 / Longitude 2 (float)
                p2z                       : z position 2 / Altitude 2 (float)

*/
mavlink.messages.safety_set_allowed_area = function(target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z) {

    this.format = '<ffffffBBB';
    this.id = mavlink.MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA;
    this.order_map = [6, 7, 8, 0, 1, 2, 3, 4, 5];
    this.crc_extra = 15;
    this.name = 'SAFETY_SET_ALLOWED_AREA';

    this.fieldnames = ['target_system', 'target_component', 'frame', 'p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z'];


    this.set(arguments);

}
        
mavlink.messages.safety_set_allowed_area.prototype = new mavlink.message;

mavlink.messages.safety_set_allowed_area.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.p1x, this.p1y, this.p1z, this.p2x, this.p2y, this.p2z, this.target_system, this.target_component, this.frame]));
}

/* 
Read out the safety zone the MAV currently assumes.

                frame                     : Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (uint8_t)
                p1x                       : x position 1 / Latitude 1 (float)
                p1y                       : y position 1 / Longitude 1 (float)
                p1z                       : z position 1 / Altitude 1 (float)
                p2x                       : x position 2 / Latitude 2 (float)
                p2y                       : y position 2 / Longitude 2 (float)
                p2z                       : z position 2 / Altitude 2 (float)

*/
mavlink.messages.safety_allowed_area = function(frame, p1x, p1y, p1z, p2x, p2y, p2z) {

    this.format = '<ffffffB';
    this.id = mavlink.MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA;
    this.order_map = [6, 0, 1, 2, 3, 4, 5];
    this.crc_extra = 3;
    this.name = 'SAFETY_ALLOWED_AREA';

    this.fieldnames = ['frame', 'p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z'];


    this.set(arguments);

}
        
mavlink.messages.safety_allowed_area.prototype = new mavlink.message;

mavlink.messages.safety_allowed_area.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.p1x, this.p1y, this.p1z, this.p2x, this.p2y, this.p2z, this.frame]));
}

/* 
Set roll, pitch and yaw.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                roll                      : Desired roll angle in radians (float)
                pitch                     : Desired pitch angle in radians (float)
                yaw                       : Desired yaw angle in radians (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

*/
mavlink.messages.set_roll_pitch_yaw_thrust = function(target_system, target_component, roll, pitch, yaw, thrust) {

    this.format = '<ffffBB';
    this.id = mavlink.MAVLINK_MSG_ID_SET_ROLL_PITCH_YAW_THRUST;
    this.order_map = [4, 5, 0, 1, 2, 3];
    this.crc_extra = 100;
    this.name = 'SET_ROLL_PITCH_YAW_THRUST';

    this.fieldnames = ['target_system', 'target_component', 'roll', 'pitch', 'yaw', 'thrust'];


    this.set(arguments);

}
        
mavlink.messages.set_roll_pitch_yaw_thrust.prototype = new mavlink.message;

mavlink.messages.set_roll_pitch_yaw_thrust.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.roll, this.pitch, this.yaw, this.thrust, this.target_system, this.target_component]));
}

/* 
Set roll, pitch and yaw.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                roll_speed                : Desired roll angular speed in rad/s (float)
                pitch_speed               : Desired pitch angular speed in rad/s (float)
                yaw_speed                 : Desired yaw angular speed in rad/s (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

*/
mavlink.messages.set_roll_pitch_yaw_speed_thrust = function(target_system, target_component, roll_speed, pitch_speed, yaw_speed, thrust) {

    this.format = '<ffffBB';
    this.id = mavlink.MAVLINK_MSG_ID_SET_ROLL_PITCH_YAW_SPEED_THRUST;
    this.order_map = [4, 5, 0, 1, 2, 3];
    this.crc_extra = 24;
    this.name = 'SET_ROLL_PITCH_YAW_SPEED_THRUST';

    this.fieldnames = ['target_system', 'target_component', 'roll_speed', 'pitch_speed', 'yaw_speed', 'thrust'];


    this.set(arguments);

}
        
mavlink.messages.set_roll_pitch_yaw_speed_thrust.prototype = new mavlink.message;

mavlink.messages.set_roll_pitch_yaw_speed_thrust.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.roll_speed, this.pitch_speed, this.yaw_speed, this.thrust, this.target_system, this.target_component]));
}

/* 
Setpoint in roll, pitch, yaw currently active on the system.

                time_boot_ms              : Timestamp in milliseconds since system boot (uint32_t)
                roll                      : Desired roll angle in radians (float)
                pitch                     : Desired pitch angle in radians (float)
                yaw                       : Desired yaw angle in radians (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

*/
mavlink.messages.roll_pitch_yaw_thrust_setpoint = function(time_boot_ms, roll, pitch, yaw, thrust) {

    this.format = '<Iffff';
    this.id = mavlink.MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT;
    this.order_map = [0, 1, 2, 3, 4];
    this.crc_extra = 239;
    this.name = 'ROLL_PITCH_YAW_THRUST_SETPOINT';

    this.fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'thrust'];


    this.set(arguments);

}
        
mavlink.messages.roll_pitch_yaw_thrust_setpoint.prototype = new mavlink.message;

mavlink.messages.roll_pitch_yaw_thrust_setpoint.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.roll, this.pitch, this.yaw, this.thrust]));
}

/* 
Setpoint in rollspeed, pitchspeed, yawspeed currently active on the
system.

                time_boot_ms              : Timestamp in milliseconds since system boot (uint32_t)
                roll_speed                : Desired roll angular speed in rad/s (float)
                pitch_speed               : Desired pitch angular speed in rad/s (float)
                yaw_speed                 : Desired yaw angular speed in rad/s (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

*/
mavlink.messages.roll_pitch_yaw_speed_thrust_setpoint = function(time_boot_ms, roll_speed, pitch_speed, yaw_speed, thrust) {

    this.format = '<Iffff';
    this.id = mavlink.MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT;
    this.order_map = [0, 1, 2, 3, 4];
    this.crc_extra = 238;
    this.name = 'ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT';

    this.fieldnames = ['time_boot_ms', 'roll_speed', 'pitch_speed', 'yaw_speed', 'thrust'];


    this.set(arguments);

}
        
mavlink.messages.roll_pitch_yaw_speed_thrust_setpoint.prototype = new mavlink.message;

mavlink.messages.roll_pitch_yaw_speed_thrust_setpoint.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.roll_speed, this.pitch_speed, this.yaw_speed, this.thrust]));
}

/* 
Setpoint in the four motor speeds

                target_system             : System ID of the system that should set these motor commands (uint8_t)
                motor_front_nw            : Front motor in + configuration, front left motor in x configuration (uint16_t)
                motor_right_ne            : Right motor in + configuration, front right motor in x configuration (uint16_t)
                motor_back_se             : Back motor in + configuration, back right motor in x configuration (uint16_t)
                motor_left_sw             : Left motor in + configuration, back left motor in x configuration (uint16_t)

*/
mavlink.messages.set_quad_motors_setpoint = function(target_system, motor_front_nw, motor_right_ne, motor_back_se, motor_left_sw) {

    this.format = '<HHHHB';
    this.id = mavlink.MAVLINK_MSG_ID_SET_QUAD_MOTORS_SETPOINT;
    this.order_map = [4, 0, 1, 2, 3];
    this.crc_extra = 30;
    this.name = 'SET_QUAD_MOTORS_SETPOINT';

    this.fieldnames = ['target_system', 'motor_front_nw', 'motor_right_ne', 'motor_back_se', 'motor_left_sw'];


    this.set(arguments);

}
        
mavlink.messages.set_quad_motors_setpoint.prototype = new mavlink.message;

mavlink.messages.set_quad_motors_setpoint.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.motor_front_nw, this.motor_right_ne, this.motor_back_se, this.motor_left_sw, this.target_system]));
}

/* 
Setpoint for up to four quadrotors in a group / wing

                group                     : ID of the quadrotor group (0 - 255, up to 256 groups supported) (uint8_t)
                mode                      : ID of the flight mode (0 - 255, up to 256 modes supported) (uint8_t)
                roll                      : Desired roll angle in radians +-PI (+-32767) (int16_t)
                pitch                     : Desired pitch angle in radians +-PI (+-32767) (int16_t)
                yaw                       : Desired yaw angle in radians, scaled to int16 +-PI (+-32767) (int16_t)
                thrust                    : Collective thrust, scaled to uint16 (0..65535) (uint16_t)

*/
mavlink.messages.set_quad_swarm_roll_pitch_yaw_thrust = function(group, mode, roll, pitch, yaw, thrust) {

    this.format = '<4h4h4h4HBB';
    this.id = mavlink.MAVLINK_MSG_ID_SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST;
    this.order_map = [4, 5, 0, 1, 2, 3];
    this.crc_extra = 240;
    this.name = 'SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST';

    this.fieldnames = ['group', 'mode', 'roll', 'pitch', 'yaw', 'thrust'];


    this.set(arguments);

}
        
mavlink.messages.set_quad_swarm_roll_pitch_yaw_thrust.prototype = new mavlink.message;

mavlink.messages.set_quad_swarm_roll_pitch_yaw_thrust.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.roll, this.pitch, this.yaw, this.thrust, this.group, this.mode]));
}

/* 
Outputs of the APM navigation controller. The primary use of this
message is to check the response and signs of the controller before
actual flight and to assist with tuning controller parameters.

                nav_roll                  : Current desired roll in degrees (float)
                nav_pitch                 : Current desired pitch in degrees (float)
                nav_bearing               : Current desired heading in degrees (int16_t)
                target_bearing            : Bearing to current MISSION/target in degrees (int16_t)
                wp_dist                   : Distance to active MISSION in meters (uint16_t)
                alt_error                 : Current altitude error in meters (float)
                aspd_error                : Current airspeed error in meters/second (float)
                xtrack_error              : Current crosstrack error on x-y plane in meters (float)

*/
mavlink.messages.nav_controller_output = function(nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error) {

    this.format = '<fffffhhH';
    this.id = mavlink.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT;
    this.order_map = [0, 1, 5, 6, 7, 2, 3, 4];
    this.crc_extra = 183;
    this.name = 'NAV_CONTROLLER_OUTPUT';

    this.fieldnames = ['nav_roll', 'nav_pitch', 'nav_bearing', 'target_bearing', 'wp_dist', 'alt_error', 'aspd_error', 'xtrack_error'];


    this.set(arguments);

}
        
mavlink.messages.nav_controller_output.prototype = new mavlink.message;

mavlink.messages.nav_controller_output.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.nav_roll, this.nav_pitch, this.alt_error, this.aspd_error, this.xtrack_error, this.nav_bearing, this.target_bearing, this.wp_dist]));
}

/* 
Setpoint for up to four quadrotors in a group / wing

                group                     : ID of the quadrotor group (0 - 255, up to 256 groups supported) (uint8_t)
                mode                      : ID of the flight mode (0 - 255, up to 256 modes supported) (uint8_t)
                led_red                   : RGB red channel (0-255) (uint8_t)
                led_blue                  : RGB green channel (0-255) (uint8_t)
                led_green                 : RGB blue channel (0-255) (uint8_t)
                roll                      : Desired roll angle in radians +-PI (+-32767) (int16_t)
                pitch                     : Desired pitch angle in radians +-PI (+-32767) (int16_t)
                yaw                       : Desired yaw angle in radians, scaled to int16 +-PI (+-32767) (int16_t)
                thrust                    : Collective thrust, scaled to uint16 (0..65535) (uint16_t)

*/
mavlink.messages.set_quad_swarm_led_roll_pitch_yaw_thrust = function(group, mode, led_red, led_blue, led_green, roll, pitch, yaw, thrust) {

    this.format = '<4h4h4h4HBB4s4s4s';
    this.id = mavlink.MAVLINK_MSG_ID_SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST;
    this.order_map = [4, 5, 6, 7, 8, 0, 1, 2, 3];
    this.crc_extra = 130;
    this.name = 'SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST';

    this.fieldnames = ['group', 'mode', 'led_red', 'led_blue', 'led_green', 'roll', 'pitch', 'yaw', 'thrust'];


    this.set(arguments);

}
        
mavlink.messages.set_quad_swarm_led_roll_pitch_yaw_thrust.prototype = new mavlink.message;

mavlink.messages.set_quad_swarm_led_roll_pitch_yaw_thrust.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.roll, this.pitch, this.yaw, this.thrust, this.group, this.mode, this.led_red, this.led_blue, this.led_green]));
}

/* 
Corrects the systems state by adding an error correction term to the
position and velocity, and by rotating the attitude by a correction
angle.

                xErr                      : x position error (float)
                yErr                      : y position error (float)
                zErr                      : z position error (float)
                rollErr                   : roll error (radians) (float)
                pitchErr                  : pitch error (radians) (float)
                yawErr                    : yaw error (radians) (float)
                vxErr                     : x velocity (float)
                vyErr                     : y velocity (float)
                vzErr                     : z velocity (float)

*/
mavlink.messages.state_correction = function(xErr, yErr, zErr, rollErr, pitchErr, yawErr, vxErr, vyErr, vzErr) {

    this.format = '<fffffffff';
    this.id = mavlink.MAVLINK_MSG_ID_STATE_CORRECTION;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    this.crc_extra = 130;
    this.name = 'STATE_CORRECTION';

    this.fieldnames = ['xErr', 'yErr', 'zErr', 'rollErr', 'pitchErr', 'yawErr', 'vxErr', 'vyErr', 'vzErr'];


    this.set(arguments);

}
        
mavlink.messages.state_correction.prototype = new mavlink.message;

mavlink.messages.state_correction.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.xErr, this.yErr, this.zErr, this.rollErr, this.pitchErr, this.yawErr, this.vxErr, this.vyErr, this.vzErr]));
}

/* 


                target_system             : The target requested to send the message stream. (uint8_t)
                target_component          : The target requested to send the message stream. (uint8_t)
                req_stream_id             : The ID of the requested data stream (uint8_t)
                req_message_rate          : The requested interval between two messages of this type (uint16_t)
                start_stop                : 1 to start sending, 0 to stop sending. (uint8_t)

*/
mavlink.messages.request_data_stream = function(target_system, target_component, req_stream_id, req_message_rate, start_stop) {

    this.format = '<HBBBB';
    this.id = mavlink.MAVLINK_MSG_ID_REQUEST_DATA_STREAM;
    this.order_map = [1, 2, 3, 0, 4];
    this.crc_extra = 148;
    this.name = 'REQUEST_DATA_STREAM';

    this.fieldnames = ['target_system', 'target_component', 'req_stream_id', 'req_message_rate', 'start_stop'];


    this.set(arguments);

}
        
mavlink.messages.request_data_stream.prototype = new mavlink.message;

mavlink.messages.request_data_stream.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.req_message_rate, this.target_system, this.target_component, this.req_stream_id, this.start_stop]));
}

/* 


                stream_id                 : The ID of the requested data stream (uint8_t)
                message_rate              : The requested interval between two messages of this type (uint16_t)
                on_off                    : 1 stream is enabled, 0 stream is stopped. (uint8_t)

*/
mavlink.messages.data_stream = function(stream_id, message_rate, on_off) {

    this.format = '<HBB';
    this.id = mavlink.MAVLINK_MSG_ID_DATA_STREAM;
    this.order_map = [1, 0, 2];
    this.crc_extra = 21;
    this.name = 'DATA_STREAM';

    this.fieldnames = ['stream_id', 'message_rate', 'on_off'];


    this.set(arguments);

}
        
mavlink.messages.data_stream.prototype = new mavlink.message;

mavlink.messages.data_stream.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.message_rate, this.stream_id, this.on_off]));
}

/* 
This message provides an API for manually controlling the vehicle
using standard joystick axes nomenclature, along with a joystick-like
input device. Unused axes can be disabled an buttons are also transmit
as boolean values of their

                target                    : The system to be controlled. (uint8_t)
                x                         : X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle. (int16_t)
                y                         : Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle. (int16_t)
                z                         : Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. (int16_t)
                r                         : R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle. (int16_t)
                buttons                   : A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1. (uint16_t)

*/
mavlink.messages.manual_control = function(target, x, y, z, r, buttons) {

    this.format = '<hhhhHB';
    this.id = mavlink.MAVLINK_MSG_ID_MANUAL_CONTROL;
    this.order_map = [5, 0, 1, 2, 3, 4];
    this.crc_extra = 243;
    this.name = 'MANUAL_CONTROL';

    this.fieldnames = ['target', 'x', 'y', 'z', 'r', 'buttons'];


    this.set(arguments);

}
        
mavlink.messages.manual_control.prototype = new mavlink.message;

mavlink.messages.manual_control.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.x, this.y, this.z, this.r, this.buttons, this.target]));
}

/* 
The RAW values of the RC channels sent to the MAV to override info
received from the RC radio. A value of -1 means no change to that
channel. A value of 0 means control of that channel should be released
back to the RC radio. The standard PPM modulation is as follows: 1000
microseconds: 0%, 2000 microseconds: 100%. Individual
receivers/transmitters might violate this specification.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                chan1_raw                 : RC channel 1 value, in microseconds (uint16_t)
                chan2_raw                 : RC channel 2 value, in microseconds (uint16_t)
                chan3_raw                 : RC channel 3 value, in microseconds (uint16_t)
                chan4_raw                 : RC channel 4 value, in microseconds (uint16_t)
                chan5_raw                 : RC channel 5 value, in microseconds (uint16_t)
                chan6_raw                 : RC channel 6 value, in microseconds (uint16_t)
                chan7_raw                 : RC channel 7 value, in microseconds (uint16_t)
                chan8_raw                 : RC channel 8 value, in microseconds (uint16_t)

*/
mavlink.messages.rc_channels_override = function(target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw) {

    this.format = '<HHHHHHHHBB';
    this.id = mavlink.MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE;
    this.order_map = [8, 9, 0, 1, 2, 3, 4, 5, 6, 7];
    this.crc_extra = 124;
    this.name = 'RC_CHANNELS_OVERRIDE';

    this.fieldnames = ['target_system', 'target_component', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw'];


    this.set(arguments);

}
        
mavlink.messages.rc_channels_override.prototype = new mavlink.message;

mavlink.messages.rc_channels_override.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.chan1_raw, this.chan2_raw, this.chan3_raw, this.chan4_raw, this.chan5_raw, this.chan6_raw, this.chan7_raw, this.chan8_raw, this.target_system, this.target_component]));
}

/* 
Metrics typically displayed on a HUD for fixed wing aircraft

                airspeed                  : Current airspeed in m/s (float)
                groundspeed               : Current ground speed in m/s (float)
                heading                   : Current heading in degrees, in compass units (0..360, 0=north) (int16_t)
                throttle                  : Current throttle setting in integer percent, 0 to 100 (uint16_t)
                alt                       : Current altitude (MSL), in meters (float)
                climb                     : Current climb rate in meters/second (float)

*/
mavlink.messages.vfr_hud = function(airspeed, groundspeed, heading, throttle, alt, climb) {

    this.format = '<ffffhH';
    this.id = mavlink.MAVLINK_MSG_ID_VFR_HUD;
    this.order_map = [0, 1, 4, 5, 2, 3];
    this.crc_extra = 20;
    this.name = 'VFR_HUD';

    this.fieldnames = ['airspeed', 'groundspeed', 'heading', 'throttle', 'alt', 'climb'];


    this.set(arguments);

}
        
mavlink.messages.vfr_hud.prototype = new mavlink.message;

mavlink.messages.vfr_hud.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.airspeed, this.groundspeed, this.alt, this.climb, this.heading, this.throttle]));
}

/* 
Send a command with up to four parameters to the MAV

                target_system             : System which should execute the command (uint8_t)
                target_component          : Component which should execute the command, 0 for all components (uint8_t)
                command                   : Command ID, as defined by MAV_CMD enum. (uint16_t)
                confirmation              : 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command) (uint8_t)
                param1                    : Parameter 1, as defined by MAV_CMD enum. (float)
                param2                    : Parameter 2, as defined by MAV_CMD enum. (float)
                param3                    : Parameter 3, as defined by MAV_CMD enum. (float)
                param4                    : Parameter 4, as defined by MAV_CMD enum. (float)
                param5                    : Parameter 5, as defined by MAV_CMD enum. (float)
                param6                    : Parameter 6, as defined by MAV_CMD enum. (float)
                param7                    : Parameter 7, as defined by MAV_CMD enum. (float)

*/
mavlink.messages.command_long = function(target_system, target_component, command, confirmation, param1, param2, param3, param4, param5, param6, param7) {

    this.format = '<fffffffHBBB';
    this.id = mavlink.MAVLINK_MSG_ID_COMMAND_LONG;
    this.order_map = [8, 9, 7, 10, 0, 1, 2, 3, 4, 5, 6];
    this.crc_extra = 152;
    this.name = 'COMMAND_LONG';

    this.fieldnames = ['target_system', 'target_component', 'command', 'confirmation', 'param1', 'param2', 'param3', 'param4', 'param5', 'param6', 'param7'];


    this.set(arguments);

}
        
mavlink.messages.command_long.prototype = new mavlink.message;

mavlink.messages.command_long.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.param1, this.param2, this.param3, this.param4, this.param5, this.param6, this.param7, this.command, this.target_system, this.target_component, this.confirmation]));
}

/* 
Report status of a command. Includes feedback wether the command was
executed.

                command                   : Command ID, as defined by MAV_CMD enum. (uint16_t)
                result                    : See MAV_RESULT enum (uint8_t)

*/
mavlink.messages.command_ack = function(command, result) {

    this.format = '<HB';
    this.id = mavlink.MAVLINK_MSG_ID_COMMAND_ACK;
    this.order_map = [0, 1];
    this.crc_extra = 143;
    this.name = 'COMMAND_ACK';

    this.fieldnames = ['command', 'result'];


    this.set(arguments);

}
        
mavlink.messages.command_ack.prototype = new mavlink.message;

mavlink.messages.command_ack.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.command, this.result]));
}

/* 
Setpoint in roll, pitch, yaw rates and thrust currently active on the
system.

                time_boot_ms              : Timestamp in milliseconds since system boot (uint32_t)
                roll_rate                 : Desired roll rate in radians per second (float)
                pitch_rate                : Desired pitch rate in radians per second (float)
                yaw_rate                  : Desired yaw rate in radians per second (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)

*/
mavlink.messages.roll_pitch_yaw_rates_thrust_setpoint = function(time_boot_ms, roll_rate, pitch_rate, yaw_rate, thrust) {

    this.format = '<Iffff';
    this.id = mavlink.MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT;
    this.order_map = [0, 1, 2, 3, 4];
    this.crc_extra = 127;
    this.name = 'ROLL_PITCH_YAW_RATES_THRUST_SETPOINT';

    this.fieldnames = ['time_boot_ms', 'roll_rate', 'pitch_rate', 'yaw_rate', 'thrust'];


    this.set(arguments);

}
        
mavlink.messages.roll_pitch_yaw_rates_thrust_setpoint.prototype = new mavlink.message;

mavlink.messages.roll_pitch_yaw_rates_thrust_setpoint.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.roll_rate, this.pitch_rate, this.yaw_rate, this.thrust]));
}

/* 
Setpoint in roll, pitch, yaw and thrust from the operator

                time_boot_ms              : Timestamp in milliseconds since system boot (uint32_t)
                roll                      : Desired roll rate in radians per second (float)
                pitch                     : Desired pitch rate in radians per second (float)
                yaw                       : Desired yaw rate in radians per second (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)
                mode_switch               : Flight mode switch position, 0.. 255 (uint8_t)
                manual_override_switch        : Override mode switch position, 0.. 255 (uint8_t)

*/
mavlink.messages.manual_setpoint = function(time_boot_ms, roll, pitch, yaw, thrust, mode_switch, manual_override_switch) {

    this.format = '<IffffBB';
    this.id = mavlink.MAVLINK_MSG_ID_MANUAL_SETPOINT;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.crc_extra = 106;
    this.name = 'MANUAL_SETPOINT';

    this.fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'thrust', 'mode_switch', 'manual_override_switch'];


    this.set(arguments);

}
        
mavlink.messages.manual_setpoint.prototype = new mavlink.message;

mavlink.messages.manual_setpoint.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.roll, this.pitch, this.yaw, this.thrust, this.mode_switch, this.manual_override_switch]));
}

/* 
The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages
of MAV X and the global coordinate frame in NED coordinates.
Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED
/ north-east-down convention)

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                x                         : X Position (float)
                y                         : Y Position (float)
                z                         : Z Position (float)
                roll                      : Roll (float)
                pitch                     : Pitch (float)
                yaw                       : Yaw (float)

*/
mavlink.messages.local_position_ned_system_global_offset = function(time_boot_ms, x, y, z, roll, pitch, yaw) {

    this.format = '<Iffffff';
    this.id = mavlink.MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.crc_extra = 231;
    this.name = 'LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET';

    this.fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'roll', 'pitch', 'yaw'];


    this.set(arguments);

}
        
mavlink.messages.local_position_ned_system_global_offset.prototype = new mavlink.message;

mavlink.messages.local_position_ned_system_global_offset.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.x, this.y, this.z, this.roll, this.pitch, this.yaw]));
}

/* 
Sent from simulation to autopilot. This packet is useful for high
throughput applications such as hardware in the loop simulations.

                time_usec                 : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                roll                      : Roll angle (rad) (float)
                pitch                     : Pitch angle (rad) (float)
                yaw                       : Yaw angle (rad) (float)
                rollspeed                 : Roll angular speed (rad/s) (float)
                pitchspeed                : Pitch angular speed (rad/s) (float)
                yawspeed                  : Yaw angular speed (rad/s) (float)
                lat                       : Latitude, expressed as * 1E7 (int32_t)
                lon                       : Longitude, expressed as * 1E7 (int32_t)
                alt                       : Altitude in meters, expressed as * 1000 (millimeters) (int32_t)
                vx                        : Ground X Speed (Latitude), expressed as m/s * 100 (int16_t)
                vy                        : Ground Y Speed (Longitude), expressed as m/s * 100 (int16_t)
                vz                        : Ground Z Speed (Altitude), expressed as m/s * 100 (int16_t)
                xacc                      : X acceleration (mg) (int16_t)
                yacc                      : Y acceleration (mg) (int16_t)
                zacc                      : Z acceleration (mg) (int16_t)

*/
mavlink.messages.hil_state = function(time_usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc) {

    this.format = '<dffffffiiihhhhhh';
    this.id = mavlink.MAVLINK_MSG_ID_HIL_STATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    this.crc_extra = 183;
    this.name = 'HIL_STATE';

    this.fieldnames = ['time_usec', 'roll', 'pitch', 'yaw', 'rollspeed', 'pitchspeed', 'yawspeed', 'lat', 'lon', 'alt', 'vx', 'vy', 'vz', 'xacc', 'yacc', 'zacc'];


    this.set(arguments);

}
        
mavlink.messages.hil_state.prototype = new mavlink.message;

mavlink.messages.hil_state.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.roll, this.pitch, this.yaw, this.rollspeed, this.pitchspeed, this.yawspeed, this.lat, this.lon, this.alt, this.vx, this.vy, this.vz, this.xacc, this.yacc, this.zacc]));
}

/* 
Sent from autopilot to simulation. Hardware in the loop control
outputs

                time_usec                 : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                roll_ailerons             : Control output -1 .. 1 (float)
                pitch_elevator            : Control output -1 .. 1 (float)
                yaw_rudder                : Control output -1 .. 1 (float)
                throttle                  : Throttle 0 .. 1 (float)
                aux1                      : Aux 1, -1 .. 1 (float)
                aux2                      : Aux 2, -1 .. 1 (float)
                aux3                      : Aux 3, -1 .. 1 (float)
                aux4                      : Aux 4, -1 .. 1 (float)
                mode                      : System mode (MAV_MODE) (uint8_t)
                nav_mode                  : Navigation mode (MAV_NAV_MODE) (uint8_t)

*/
mavlink.messages.hil_controls = function(time_usec, roll_ailerons, pitch_elevator, yaw_rudder, throttle, aux1, aux2, aux3, aux4, mode, nav_mode) {

    this.format = '<dffffffffBB';
    this.id = mavlink.MAVLINK_MSG_ID_HIL_CONTROLS;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    this.crc_extra = 63;
    this.name = 'HIL_CONTROLS';

    this.fieldnames = ['time_usec', 'roll_ailerons', 'pitch_elevator', 'yaw_rudder', 'throttle', 'aux1', 'aux2', 'aux3', 'aux4', 'mode', 'nav_mode'];


    this.set(arguments);

}
        
mavlink.messages.hil_controls.prototype = new mavlink.message;

mavlink.messages.hil_controls.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.roll_ailerons, this.pitch_elevator, this.yaw_rudder, this.throttle, this.aux1, this.aux2, this.aux3, this.aux4, this.mode, this.nav_mode]));
}

/* 
Sent from simulation to autopilot. The RAW values of the RC channels
received. The standard PPM modulation is as follows: 1000
microseconds: 0%, 2000 microseconds: 100%. Individual
receivers/transmitters might violate this specification.

                time_usec                 : Timestamp (microseconds since UNIX epoch or microseconds since system boot) (uint64_t)
                chan1_raw                 : RC channel 1 value, in microseconds (uint16_t)
                chan2_raw                 : RC channel 2 value, in microseconds (uint16_t)
                chan3_raw                 : RC channel 3 value, in microseconds (uint16_t)
                chan4_raw                 : RC channel 4 value, in microseconds (uint16_t)
                chan5_raw                 : RC channel 5 value, in microseconds (uint16_t)
                chan6_raw                 : RC channel 6 value, in microseconds (uint16_t)
                chan7_raw                 : RC channel 7 value, in microseconds (uint16_t)
                chan8_raw                 : RC channel 8 value, in microseconds (uint16_t)
                chan9_raw                 : RC channel 9 value, in microseconds (uint16_t)
                chan10_raw                : RC channel 10 value, in microseconds (uint16_t)
                chan11_raw                : RC channel 11 value, in microseconds (uint16_t)
                chan12_raw                : RC channel 12 value, in microseconds (uint16_t)
                rssi                      : Receive signal strength indicator, 0: 0%, 255: 100% (uint8_t)

*/
mavlink.messages.hil_rc_inputs_raw = function(time_usec, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, rssi) {

    this.format = '<dHHHHHHHHHHHHB';
    this.id = mavlink.MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
    this.crc_extra = 54;
    this.name = 'HIL_RC_INPUTS_RAW';

    this.fieldnames = ['time_usec', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw', 'chan9_raw', 'chan10_raw', 'chan11_raw', 'chan12_raw', 'rssi'];


    this.set(arguments);

}
        
mavlink.messages.hil_rc_inputs_raw.prototype = new mavlink.message;

mavlink.messages.hil_rc_inputs_raw.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.chan1_raw, this.chan2_raw, this.chan3_raw, this.chan4_raw, this.chan5_raw, this.chan6_raw, this.chan7_raw, this.chan8_raw, this.chan9_raw, this.chan10_raw, this.chan11_raw, this.chan12_raw, this.rssi]));
}

/* 
Optical flow from a flow sensor (e.g. optical mouse sensor)

                time_usec                 : Timestamp (UNIX) (uint64_t)
                sensor_id                 : Sensor ID (uint8_t)
                flow_x                    : Flow in pixels in x-sensor direction (int16_t)
                flow_y                    : Flow in pixels in y-sensor direction (int16_t)
                flow_comp_m_x             : Flow in meters in x-sensor direction, angular-speed compensated (float)
                flow_comp_m_y             : Flow in meters in y-sensor direction, angular-speed compensated (float)
                quality                   : Optical flow quality / confidence. 0: bad, 255: maximum quality (uint8_t)
                ground_distance           : Ground distance in meters. Positive value: distance known. Negative value: Unknown distance (float)

*/
mavlink.messages.optical_flow = function(time_usec, sensor_id, flow_x, flow_y, flow_comp_m_x, flow_comp_m_y, quality, ground_distance) {

    this.format = '<dfffhhBB';
    this.id = mavlink.MAVLINK_MSG_ID_OPTICAL_FLOW;
    this.order_map = [0, 6, 4, 5, 1, 2, 7, 3];
    this.crc_extra = 175;
    this.name = 'OPTICAL_FLOW';

    this.fieldnames = ['time_usec', 'sensor_id', 'flow_x', 'flow_y', 'flow_comp_m_x', 'flow_comp_m_y', 'quality', 'ground_distance'];


    this.set(arguments);

}
        
mavlink.messages.optical_flow.prototype = new mavlink.message;

mavlink.messages.optical_flow.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.flow_comp_m_x, this.flow_comp_m_y, this.ground_distance, this.flow_x, this.flow_y, this.sensor_id, this.quality]));
}

/* 


                usec                      : Timestamp (microseconds, synced to UNIX time or since system boot) (uint64_t)
                x                         : Global X position (float)
                y                         : Global Y position (float)
                z                         : Global Z position (float)
                roll                      : Roll angle in rad (float)
                pitch                     : Pitch angle in rad (float)
                yaw                       : Yaw angle in rad (float)

*/
mavlink.messages.global_vision_position_estimate = function(usec, x, y, z, roll, pitch, yaw) {

    this.format = '<dffffff';
    this.id = mavlink.MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.crc_extra = 102;
    this.name = 'GLOBAL_VISION_POSITION_ESTIMATE';

    this.fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw'];


    this.set(arguments);

}
        
mavlink.messages.global_vision_position_estimate.prototype = new mavlink.message;

mavlink.messages.global_vision_position_estimate.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.usec, this.x, this.y, this.z, this.roll, this.pitch, this.yaw]));
}

/* 


                usec                      : Timestamp (microseconds, synced to UNIX time or since system boot) (uint64_t)
                x                         : Global X position (float)
                y                         : Global Y position (float)
                z                         : Global Z position (float)
                roll                      : Roll angle in rad (float)
                pitch                     : Pitch angle in rad (float)
                yaw                       : Yaw angle in rad (float)

*/
mavlink.messages.vision_position_estimate = function(usec, x, y, z, roll, pitch, yaw) {

    this.format = '<dffffff';
    this.id = mavlink.MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.crc_extra = 158;
    this.name = 'VISION_POSITION_ESTIMATE';

    this.fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw'];


    this.set(arguments);

}
        
mavlink.messages.vision_position_estimate.prototype = new mavlink.message;

mavlink.messages.vision_position_estimate.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.usec, this.x, this.y, this.z, this.roll, this.pitch, this.yaw]));
}

/* 


                usec                      : Timestamp (microseconds, synced to UNIX time or since system boot) (uint64_t)
                x                         : Global X speed (float)
                y                         : Global Y speed (float)
                z                         : Global Z speed (float)

*/
mavlink.messages.vision_speed_estimate = function(usec, x, y, z) {

    this.format = '<dfff';
    this.id = mavlink.MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE;
    this.order_map = [0, 1, 2, 3];
    this.crc_extra = 208;
    this.name = 'VISION_SPEED_ESTIMATE';

    this.fieldnames = ['usec', 'x', 'y', 'z'];


    this.set(arguments);

}
        
mavlink.messages.vision_speed_estimate.prototype = new mavlink.message;

mavlink.messages.vision_speed_estimate.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.usec, this.x, this.y, this.z]));
}

/* 


                usec                      : Timestamp (microseconds, synced to UNIX time or since system boot) (uint64_t)
                x                         : Global X position (float)
                y                         : Global Y position (float)
                z                         : Global Z position (float)
                roll                      : Roll angle in rad (float)
                pitch                     : Pitch angle in rad (float)
                yaw                       : Yaw angle in rad (float)

*/
mavlink.messages.vicon_position_estimate = function(usec, x, y, z, roll, pitch, yaw) {

    this.format = '<dffffff';
    this.id = mavlink.MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.crc_extra = 56;
    this.name = 'VICON_POSITION_ESTIMATE';

    this.fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw'];


    this.set(arguments);

}
        
mavlink.messages.vicon_position_estimate.prototype = new mavlink.message;

mavlink.messages.vicon_position_estimate.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.usec, this.x, this.y, this.z, this.roll, this.pitch, this.yaw]));
}

/* 
The IMU readings in SI units in NED body frame

                time_usec                 : Timestamp (microseconds, synced to UNIX time or since system boot) (uint64_t)
                xacc                      : X acceleration (m/s^2) (float)
                yacc                      : Y acceleration (m/s^2) (float)
                zacc                      : Z acceleration (m/s^2) (float)
                xgyro                     : Angular speed around X axis (rad / sec) (float)
                ygyro                     : Angular speed around Y axis (rad / sec) (float)
                zgyro                     : Angular speed around Z axis (rad / sec) (float)
                xmag                      : X Magnetic field (Gauss) (float)
                ymag                      : Y Magnetic field (Gauss) (float)
                zmag                      : Z Magnetic field (Gauss) (float)
                abs_pressure              : Absolute pressure in millibar (float)
                diff_pressure             : Differential pressure in millibar (float)
                pressure_alt              : Altitude calculated from pressure (float)
                temperature               : Temperature in degrees celsius (float)
                fields_updated            : Bitmask for fields that have updated since last message, bit 0 = xacc, bit 12: temperature (uint16_t)

*/
mavlink.messages.highres_imu = function(time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated) {

    this.format = '<dfffffffffffffH';
    this.id = mavlink.MAVLINK_MSG_ID_HIGHRES_IMU;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];
    this.crc_extra = 93;
    this.name = 'HIGHRES_IMU';

    this.fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag', 'abs_pressure', 'diff_pressure', 'pressure_alt', 'temperature', 'fields_updated'];


    this.set(arguments);

}
        
mavlink.messages.highres_imu.prototype = new mavlink.message;

mavlink.messages.highres_imu.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag, this.abs_pressure, this.diff_pressure, this.pressure_alt, this.temperature, this.fields_updated]));
}

/* 
Optical flow from an omnidirectional flow sensor (e.g. PX4FLOW with
wide angle lens)

                time_usec                 : Timestamp (microseconds, synced to UNIX time or since system boot) (uint64_t)
                sensor_id                 : Sensor ID (uint8_t)
                left                      : Flow in deci pixels (1 = 0.1 pixel) on left hemisphere (int16_t)
                right                     : Flow in deci pixels (1 = 0.1 pixel) on right hemisphere (int16_t)
                quality                   : Optical flow quality / confidence. 0: bad, 255: maximum quality (uint8_t)
                front_distance_m          : Front distance in meters. Positive value (including zero): distance known. Negative value: Unknown distance (float)

*/
mavlink.messages.omnidirectional_flow = function(time_usec, sensor_id, left, right, quality, front_distance_m) {

    this.format = '<df10h10hBB';
    this.id = mavlink.MAVLINK_MSG_ID_OMNIDIRECTIONAL_FLOW;
    this.order_map = [0, 4, 2, 3, 5, 1];
    this.crc_extra = 211;
    this.name = 'OMNIDIRECTIONAL_FLOW';

    this.fieldnames = ['time_usec', 'sensor_id', 'left', 'right', 'quality', 'front_distance_m'];


    this.set(arguments);

}
        
mavlink.messages.omnidirectional_flow.prototype = new mavlink.message;

mavlink.messages.omnidirectional_flow.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.front_distance_m, this.left, this.right, this.sensor_id, this.quality]));
}

/* 
Begin file transfer

                transfer_uid              : Unique transfer ID (uint64_t)
                dest_path                 : Destination path (char)
                direction                 : Transfer direction: 0: from requester, 1: to requester (uint8_t)
                file_size                 : File size in bytes (uint32_t)
                flags                     : RESERVED (uint8_t)

*/
mavlink.messages.file_transfer_start = function(transfer_uid, dest_path, direction, file_size, flags) {

    this.format = '<dI240sBB';
    this.id = mavlink.MAVLINK_MSG_ID_FILE_TRANSFER_START;
    this.order_map = [0, 2, 3, 1, 4];
    this.crc_extra = 235;
    this.name = 'FILE_TRANSFER_START';

    this.fieldnames = ['transfer_uid', 'dest_path', 'direction', 'file_size', 'flags'];


    this.set(arguments);

}
        
mavlink.messages.file_transfer_start.prototype = new mavlink.message;

mavlink.messages.file_transfer_start.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.transfer_uid, this.file_size, this.dest_path, this.direction, this.flags]));
}

/* 
Get directory listing

                transfer_uid              : Unique transfer ID (uint64_t)
                dir_path                  : Directory path to list (char)
                flags                     : RESERVED (uint8_t)

*/
mavlink.messages.file_transfer_dir_list = function(transfer_uid, dir_path, flags) {

    this.format = '<d240sB';
    this.id = mavlink.MAVLINK_MSG_ID_FILE_TRANSFER_DIR_LIST;
    this.order_map = [0, 1, 2];
    this.crc_extra = 93;
    this.name = 'FILE_TRANSFER_DIR_LIST';

    this.fieldnames = ['transfer_uid', 'dir_path', 'flags'];


    this.set(arguments);

}
        
mavlink.messages.file_transfer_dir_list.prototype = new mavlink.message;

mavlink.messages.file_transfer_dir_list.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.transfer_uid, this.dir_path, this.flags]));
}

/* 
File transfer result

                transfer_uid              : Unique transfer ID (uint64_t)
                result                    : 0: OK, 1: not permitted, 2: bad path / file name, 3: no space left on device (uint8_t)

*/
mavlink.messages.file_transfer_res = function(transfer_uid, result) {

    this.format = '<dB';
    this.id = mavlink.MAVLINK_MSG_ID_FILE_TRANSFER_RES;
    this.order_map = [0, 1];
    this.crc_extra = 124;
    this.name = 'FILE_TRANSFER_RES';

    this.fieldnames = ['transfer_uid', 'result'];


    this.set(arguments);

}
        
mavlink.messages.file_transfer_res.prototype = new mavlink.message;

mavlink.messages.file_transfer_res.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.transfer_uid, this.result]));
}

/* 
Transmitte battery informations for a accu pack.

                accu_id                   : Accupack ID (uint8_t)
                voltage_cell_1            : Battery voltage of cell 1, in millivolts (1 = 1 millivolt) (uint16_t)
                voltage_cell_2            : Battery voltage of cell 2, in millivolts (1 = 1 millivolt), -1: no cell (uint16_t)
                voltage_cell_3            : Battery voltage of cell 3, in millivolts (1 = 1 millivolt), -1: no cell (uint16_t)
                voltage_cell_4            : Battery voltage of cell 4, in millivolts (1 = 1 millivolt), -1: no cell (uint16_t)
                voltage_cell_5            : Battery voltage of cell 5, in millivolts (1 = 1 millivolt), -1: no cell (uint16_t)
                voltage_cell_6            : Battery voltage of cell 6, in millivolts (1 = 1 millivolt), -1: no cell (uint16_t)
                current_battery           : Battery current, in 10*milliamperes (1 = 10 milliampere), -1: autopilot does not measure the current (int16_t)
                battery_remaining         : Remaining battery energy: (0%: 0, 100%: 100), -1: autopilot does not estimate the remaining battery (int8_t)

*/
mavlink.messages.battery_status = function(accu_id, voltage_cell_1, voltage_cell_2, voltage_cell_3, voltage_cell_4, voltage_cell_5, voltage_cell_6, current_battery, battery_remaining) {

    this.format = '<HHHHHHhBb';
    this.id = mavlink.MAVLINK_MSG_ID_BATTERY_STATUS;
    this.order_map = [7, 0, 1, 2, 3, 4, 5, 6, 8];
    this.crc_extra = 42;
    this.name = 'BATTERY_STATUS';

    this.fieldnames = ['accu_id', 'voltage_cell_1', 'voltage_cell_2', 'voltage_cell_3', 'voltage_cell_4', 'voltage_cell_5', 'voltage_cell_6', 'current_battery', 'battery_remaining'];


    this.set(arguments);

}
        
mavlink.messages.battery_status.prototype = new mavlink.message;

mavlink.messages.battery_status.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.voltage_cell_1, this.voltage_cell_2, this.voltage_cell_3, this.voltage_cell_4, this.voltage_cell_5, this.voltage_cell_6, this.current_battery, this.accu_id, this.battery_remaining]));
}

/* 
Set the 8 DOF setpoint for a controller.

                target_system             : System ID (uint8_t)
                val1                      : Value 1 (float)
                val2                      : Value 2 (float)
                val3                      : Value 3 (float)
                val4                      : Value 4 (float)
                val5                      : Value 5 (float)
                val6                      : Value 6 (float)
                val7                      : Value 7 (float)
                val8                      : Value 8 (float)

*/
mavlink.messages.setpoint_8dof = function(target_system, val1, val2, val3, val4, val5, val6, val7, val8) {

    this.format = '<ffffffffB';
    this.id = mavlink.MAVLINK_MSG_ID_SETPOINT_8DOF;
    this.order_map = [8, 0, 1, 2, 3, 4, 5, 6, 7];
    this.crc_extra = 241;
    this.name = 'SETPOINT_8DOF';

    this.fieldnames = ['target_system', 'val1', 'val2', 'val3', 'val4', 'val5', 'val6', 'val7', 'val8'];


    this.set(arguments);

}
        
mavlink.messages.setpoint_8dof.prototype = new mavlink.message;

mavlink.messages.setpoint_8dof.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.val1, this.val2, this.val3, this.val4, this.val5, this.val6, this.val7, this.val8, this.target_system]));
}

/* 
Set the 6 DOF setpoint for a attitude and position controller.

                target_system             : System ID (uint8_t)
                trans_x                   : Translational Component in x (float)
                trans_y                   : Translational Component in y (float)
                trans_z                   : Translational Component in z (float)
                rot_x                     : Rotational Component in x (float)
                rot_y                     : Rotational Component in y (float)
                rot_z                     : Rotational Component in z (float)

*/
mavlink.messages.setpoint_6dof = function(target_system, trans_x, trans_y, trans_z, rot_x, rot_y, rot_z) {

    this.format = '<ffffffB';
    this.id = mavlink.MAVLINK_MSG_ID_SETPOINT_6DOF;
    this.order_map = [6, 0, 1, 2, 3, 4, 5];
    this.crc_extra = 15;
    this.name = 'SETPOINT_6DOF';

    this.fieldnames = ['target_system', 'trans_x', 'trans_y', 'trans_z', 'rot_x', 'rot_y', 'rot_z'];


    this.set(arguments);

}
        
mavlink.messages.setpoint_6dof.prototype = new mavlink.message;

mavlink.messages.setpoint_6dof.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.trans_x, this.trans_y, this.trans_z, this.rot_x, this.rot_y, this.rot_z, this.target_system]));
}

/* 
Send raw controller memory. The use of this message is discouraged for
normal packets, but a quite efficient way for testing new messages and
getting experimental debug output.

                address                   : Starting address of the debug variables (uint16_t)
                ver                       : Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below (uint8_t)
                type                      : Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14 (uint8_t)
                value                     : Memory contents at specified address (int8_t)

*/
mavlink.messages.memory_vect = function(address, ver, type, value) {

    this.format = '<HBB32s';
    this.id = mavlink.MAVLINK_MSG_ID_MEMORY_VECT;
    this.order_map = [0, 1, 2, 3];
    this.crc_extra = 204;
    this.name = 'MEMORY_VECT';

    this.fieldnames = ['address', 'ver', 'type', 'value'];


    this.set(arguments);

}
        
mavlink.messages.memory_vect.prototype = new mavlink.message;

mavlink.messages.memory_vect.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.address, this.ver, this.type, this.value]));
}

/* 


                name                      : Name (char)
                time_usec                 : Timestamp (uint64_t)
                x                         : x (float)
                y                         : y (float)
                z                         : z (float)

*/
mavlink.messages.debug_vect = function(name, time_usec, x, y, z) {

    this.format = '<dfff10s';
    this.id = mavlink.MAVLINK_MSG_ID_DEBUG_VECT;
    this.order_map = [4, 0, 1, 2, 3];
    this.crc_extra = 49;
    this.name = 'DEBUG_VECT';

    this.fieldnames = ['name', 'time_usec', 'x', 'y', 'z'];


    this.set(arguments);

}
        
mavlink.messages.debug_vect.prototype = new mavlink.message;

mavlink.messages.debug_vect.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_usec, this.x, this.y, this.z, this.name]));
}

/* 
Send a key-value pair as float. The use of this message is discouraged
for normal packets, but a quite efficient way for testing new messages
and getting experimental debug output.

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                name                      : Name of the debug variable (char)
                value                     : Floating point value (float)

*/
mavlink.messages.named_value_float = function(time_boot_ms, name, value) {

    this.format = '<If10s';
    this.id = mavlink.MAVLINK_MSG_ID_NAMED_VALUE_FLOAT;
    this.order_map = [0, 2, 1];
    this.crc_extra = 170;
    this.name = 'NAMED_VALUE_FLOAT';

    this.fieldnames = ['time_boot_ms', 'name', 'value'];


    this.set(arguments);

}
        
mavlink.messages.named_value_float.prototype = new mavlink.message;

mavlink.messages.named_value_float.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.value, this.name]));
}

/* 
Send a key-value pair as integer. The use of this message is
discouraged for normal packets, but a quite efficient way for testing
new messages and getting experimental debug output.

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                name                      : Name of the debug variable (char)
                value                     : Signed integer value (int32_t)

*/
mavlink.messages.named_value_int = function(time_boot_ms, name, value) {

    this.format = '<Ii10s';
    this.id = mavlink.MAVLINK_MSG_ID_NAMED_VALUE_INT;
    this.order_map = [0, 2, 1];
    this.crc_extra = 44;
    this.name = 'NAMED_VALUE_INT';

    this.fieldnames = ['time_boot_ms', 'name', 'value'];


    this.set(arguments);

}
        
mavlink.messages.named_value_int.prototype = new mavlink.message;

mavlink.messages.named_value_int.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.value, this.name]));
}

/* 
Status text message. These messages are printed in yellow in the COMM
console of QGroundControl. WARNING: They consume quite some bandwidth,
so use only for important status and error messages. If implemented
wisely, these messages are buffered on the MCU and sent only at a
limited rate (e.g. 10 Hz).

                severity                  : Severity of status. Relies on the definitions within RFC-5424. See enum MAV_SEVERITY. (uint8_t)
                text                      : Status text message, without null termination character (char)

*/
mavlink.messages.statustext = function(severity, text) {

    this.format = '<B50s';
    this.id = mavlink.MAVLINK_MSG_ID_STATUSTEXT;
    this.order_map = [0, 1];
    this.crc_extra = 83;
    this.name = 'STATUSTEXT';

    this.fieldnames = ['severity', 'text'];


    this.set(arguments);

}
        
mavlink.messages.statustext.prototype = new mavlink.message;

mavlink.messages.statustext.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.severity, this.text]));
}

/* 
Send a debug value. The index is used to discriminate between values.
These values show up in the plot of QGroundControl as DEBUG N.

                time_boot_ms              : Timestamp (milliseconds since system boot) (uint32_t)
                ind                       : index of debug variable (uint8_t)
                value                     : DEBUG value (float)

*/
mavlink.messages.debug = function(time_boot_ms, ind, value) {

    this.format = '<IfB';
    this.id = mavlink.MAVLINK_MSG_ID_DEBUG;
    this.order_map = [0, 2, 1];
    this.crc_extra = 46;
    this.name = 'DEBUG';

    this.fieldnames = ['time_boot_ms', 'ind', 'value'];


    this.set(arguments);

}
        
mavlink.messages.debug.prototype = new mavlink.message;

mavlink.messages.debug.prototype.pack = function() {
    return mavlink.message.prototype.pack.call(this, this.crc_extra, jspack.Pack(this.format, [ this.time_boot_ms, this.value, this.ind]));
}



mavlink.map = {
        170: { format: '<iii', type: mavlink.messages.obs_position, order_map: [0, 1, 2], crc_extra: 15 },
        172: { format: '<3f', type: mavlink.messages.obs_velocity, order_map: [0], crc_extra: 108 },
        174: { format: '<4d', type: mavlink.messages.obs_attitude, order_map: [0], crc_extra: 146 },
        176: { format: '<3f', type: mavlink.messages.obs_wind, order_map: [0], crc_extra: 16 },
        178: { format: '<fff', type: mavlink.messages.obs_air_velocity, order_map: [0, 1, 2], crc_extra: 32 },
        180: { format: '<3f3f', type: mavlink.messages.obs_bias, order_map: [0, 1], crc_extra: 159 },
        182: { format: '<f', type: mavlink.messages.obs_qff, order_map: [0], crc_extra: 24 },
        183: { format: '<f', type: mavlink.messages.obs_air_temp, order_map: [0], crc_extra: 248 },
        184: { format: '<3f', type: mavlink.messages.filt_rot_vel, order_map: [0], crc_extra: 79 },
        186: { format: '<4h2h', type: mavlink.messages.llc_out, order_map: [0, 1], crc_extra: 5 },
        188: { format: '<ff3f', type: mavlink.messages.pm_elec, order_map: [0, 1, 2], crc_extra: 170 },
        190: { format: '<BBBB', type: mavlink.messages.sys_stat, order_map: [0, 1, 2, 3], crc_extra: 157 },
        192: { format: '<fB', type: mavlink.messages.cmd_airspeed_chng, order_map: [1, 0], crc_extra: 209 },
        194: { format: '<fB', type: mavlink.messages.cmd_airspeed_ack, order_map: [0, 1], crc_extra: 243 },
        0: { format: '<IBBBBB', type: mavlink.messages.heartbeat, order_map: [1, 2, 3, 0, 4, 5], crc_extra: 50 },
        1: { format: '<IIIHHhHHHHHHb', type: mavlink.messages.sys_status, order_map: [0, 1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11], crc_extra: 124 },
        2: { format: '<dI', type: mavlink.messages.system_time, order_map: [0, 1], crc_extra: 137 },
        4: { format: '<dIBB', type: mavlink.messages.ping, order_map: [0, 1, 2, 3], crc_extra: 237 },
        5: { format: '<BBB25s', type: mavlink.messages.change_operator_control, order_map: [0, 1, 2, 3], crc_extra: 217 },
        6: { format: '<BBB', type: mavlink.messages.change_operator_control_ack, order_map: [0, 1, 2], crc_extra: 104 },
        7: { format: '<32s', type: mavlink.messages.auth_key, order_map: [0], crc_extra: 119 },
        11: { format: '<IBB', type: mavlink.messages.set_mode, order_map: [1, 2, 0], crc_extra: 89 },
        20: { format: '<hBB16s', type: mavlink.messages.param_request_read, order_map: [1, 2, 3, 0], crc_extra: 214 },
        21: { format: '<BB', type: mavlink.messages.param_request_list, order_map: [0, 1], crc_extra: 159 },
        22: { format: '<fHH16sB', type: mavlink.messages.param_value, order_map: [3, 0, 4, 1, 2], crc_extra: 220 },
        23: { format: '<fBB16sB', type: mavlink.messages.param_set, order_map: [1, 2, 3, 0, 4], crc_extra: 168 },
        24: { format: '<diiiHHHHBB', type: mavlink.messages.gps_raw_int, order_map: [0, 8, 1, 2, 3, 4, 5, 6, 7, 9], crc_extra: 24 },
        25: { format: '<B20s20s20s20s20s', type: mavlink.messages.gps_status, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 23 },
        26: { format: '<Ihhhhhhhhh', type: mavlink.messages.scaled_imu, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 170 },
        27: { format: '<dhhhhhhhhh', type: mavlink.messages.raw_imu, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 144 },
        28: { format: '<dhhhh', type: mavlink.messages.raw_pressure, order_map: [0, 1, 2, 3, 4], crc_extra: 67 },
        29: { format: '<Iffh', type: mavlink.messages.scaled_pressure, order_map: [0, 1, 2, 3], crc_extra: 115 },
        30: { format: '<Iffffff', type: mavlink.messages.attitude, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 39 },
        31: { format: '<Ifffffff', type: mavlink.messages.attitude_quaternion, order_map: [0, 1, 2, 3, 4, 5, 6, 7], crc_extra: 246 },
        32: { format: '<Iffffff', type: mavlink.messages.local_position_ned, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 185 },
        33: { format: '<IiiiihhhH', type: mavlink.messages.global_position_int, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 104 },
        34: { format: '<IhhhhhhhhBB', type: mavlink.messages.rc_channels_scaled, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10], crc_extra: 237 },
        35: { format: '<IHHHHHHHHBB', type: mavlink.messages.rc_channels_raw, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10], crc_extra: 244 },
        36: { format: '<IHHHHHHHHB', type: mavlink.messages.servo_output_raw, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 222 },
        37: { format: '<hhBB', type: mavlink.messages.mission_request_partial_list, order_map: [2, 3, 0, 1], crc_extra: 212 },
        38: { format: '<hhBB', type: mavlink.messages.mission_write_partial_list, order_map: [2, 3, 0, 1], crc_extra: 9 },
        39: { format: '<fffffffHHBBBBB', type: mavlink.messages.mission_item, order_map: [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6], crc_extra: 254 },
        40: { format: '<HBB', type: mavlink.messages.mission_request, order_map: [1, 2, 0], crc_extra: 230 },
        41: { format: '<HBB', type: mavlink.messages.mission_set_current, order_map: [1, 2, 0], crc_extra: 28 },
        42: { format: '<H', type: mavlink.messages.mission_current, order_map: [0], crc_extra: 28 },
        43: { format: '<BB', type: mavlink.messages.mission_request_list, order_map: [0, 1], crc_extra: 132 },
        44: { format: '<HBB', type: mavlink.messages.mission_count, order_map: [1, 2, 0], crc_extra: 221 },
        45: { format: '<BB', type: mavlink.messages.mission_clear_all, order_map: [0, 1], crc_extra: 232 },
        46: { format: '<H', type: mavlink.messages.mission_item_reached, order_map: [0], crc_extra: 11 },
        47: { format: '<BBB', type: mavlink.messages.mission_ack, order_map: [0, 1, 2], crc_extra: 153 },
        48: { format: '<iiiB', type: mavlink.messages.set_gps_global_origin, order_map: [3, 0, 1, 2], crc_extra: 41 },
        49: { format: '<iii', type: mavlink.messages.gps_global_origin, order_map: [0, 1, 2], crc_extra: 39 },
        50: { format: '<ffffBBB', type: mavlink.messages.set_local_position_setpoint, order_map: [4, 5, 6, 0, 1, 2, 3], crc_extra: 214 },
        51: { format: '<ffffB', type: mavlink.messages.local_position_setpoint, order_map: [4, 0, 1, 2, 3], crc_extra: 223 },
        52: { format: '<iiihB', type: mavlink.messages.global_position_setpoint_int, order_map: [4, 0, 1, 2, 3], crc_extra: 141 },
        53: { format: '<iiihB', type: mavlink.messages.set_global_position_setpoint_int, order_map: [4, 0, 1, 2, 3], crc_extra: 33 },
        54: { format: '<ffffffBBB', type: mavlink.messages.safety_set_allowed_area, order_map: [6, 7, 8, 0, 1, 2, 3, 4, 5], crc_extra: 15 },
        55: { format: '<ffffffB', type: mavlink.messages.safety_allowed_area, order_map: [6, 0, 1, 2, 3, 4, 5], crc_extra: 3 },
        56: { format: '<ffffBB', type: mavlink.messages.set_roll_pitch_yaw_thrust, order_map: [4, 5, 0, 1, 2, 3], crc_extra: 100 },
        57: { format: '<ffffBB', type: mavlink.messages.set_roll_pitch_yaw_speed_thrust, order_map: [4, 5, 0, 1, 2, 3], crc_extra: 24 },
        58: { format: '<Iffff', type: mavlink.messages.roll_pitch_yaw_thrust_setpoint, order_map: [0, 1, 2, 3, 4], crc_extra: 239 },
        59: { format: '<Iffff', type: mavlink.messages.roll_pitch_yaw_speed_thrust_setpoint, order_map: [0, 1, 2, 3, 4], crc_extra: 238 },
        60: { format: '<HHHHB', type: mavlink.messages.set_quad_motors_setpoint, order_map: [4, 0, 1, 2, 3], crc_extra: 30 },
        61: { format: '<4h4h4h4HBB', type: mavlink.messages.set_quad_swarm_roll_pitch_yaw_thrust, order_map: [4, 5, 0, 1, 2, 3], crc_extra: 240 },
        62: { format: '<fffffhhH', type: mavlink.messages.nav_controller_output, order_map: [0, 1, 5, 6, 7, 2, 3, 4], crc_extra: 183 },
        63: { format: '<4h4h4h4HBB4s4s4s', type: mavlink.messages.set_quad_swarm_led_roll_pitch_yaw_thrust, order_map: [4, 5, 6, 7, 8, 0, 1, 2, 3], crc_extra: 130 },
        64: { format: '<fffffffff', type: mavlink.messages.state_correction, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 130 },
        66: { format: '<HBBBB', type: mavlink.messages.request_data_stream, order_map: [1, 2, 3, 0, 4], crc_extra: 148 },
        67: { format: '<HBB', type: mavlink.messages.data_stream, order_map: [1, 0, 2], crc_extra: 21 },
        69: { format: '<hhhhHB', type: mavlink.messages.manual_control, order_map: [5, 0, 1, 2, 3, 4], crc_extra: 243 },
        70: { format: '<HHHHHHHHBB', type: mavlink.messages.rc_channels_override, order_map: [8, 9, 0, 1, 2, 3, 4, 5, 6, 7], crc_extra: 124 },
        74: { format: '<ffffhH', type: mavlink.messages.vfr_hud, order_map: [0, 1, 4, 5, 2, 3], crc_extra: 20 },
        76: { format: '<fffffffHBBB', type: mavlink.messages.command_long, order_map: [8, 9, 7, 10, 0, 1, 2, 3, 4, 5, 6], crc_extra: 152 },
        77: { format: '<HB', type: mavlink.messages.command_ack, order_map: [0, 1], crc_extra: 143 },
        80: { format: '<Iffff', type: mavlink.messages.roll_pitch_yaw_rates_thrust_setpoint, order_map: [0, 1, 2, 3, 4], crc_extra: 127 },
        81: { format: '<IffffBB', type: mavlink.messages.manual_setpoint, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 106 },
        89: { format: '<Iffffff', type: mavlink.messages.local_position_ned_system_global_offset, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 231 },
        90: { format: '<dffffffiiihhhhhh', type: mavlink.messages.hil_state, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], crc_extra: 183 },
        91: { format: '<dffffffffBB', type: mavlink.messages.hil_controls, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], crc_extra: 63 },
        92: { format: '<dHHHHHHHHHHHHB', type: mavlink.messages.hil_rc_inputs_raw, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], crc_extra: 54 },
        100: { format: '<dfffhhBB', type: mavlink.messages.optical_flow, order_map: [0, 6, 4, 5, 1, 2, 7, 3], crc_extra: 175 },
        101: { format: '<dffffff', type: mavlink.messages.global_vision_position_estimate, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 102 },
        102: { format: '<dffffff', type: mavlink.messages.vision_position_estimate, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 158 },
        103: { format: '<dfff', type: mavlink.messages.vision_speed_estimate, order_map: [0, 1, 2, 3], crc_extra: 208 },
        104: { format: '<dffffff', type: mavlink.messages.vicon_position_estimate, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 56 },
        105: { format: '<dfffffffffffffH', type: mavlink.messages.highres_imu, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], crc_extra: 93 },
        106: { format: '<df10h10hBB', type: mavlink.messages.omnidirectional_flow, order_map: [0, 4, 2, 3, 5, 1], crc_extra: 211 },
        110: { format: '<dI240sBB', type: mavlink.messages.file_transfer_start, order_map: [0, 2, 3, 1, 4], crc_extra: 235 },
        111: { format: '<d240sB', type: mavlink.messages.file_transfer_dir_list, order_map: [0, 1, 2], crc_extra: 93 },
        112: { format: '<dB', type: mavlink.messages.file_transfer_res, order_map: [0, 1], crc_extra: 124 },
        147: { format: '<HHHHHHhBb', type: mavlink.messages.battery_status, order_map: [7, 0, 1, 2, 3, 4, 5, 6, 8], crc_extra: 42 },
        148: { format: '<ffffffffB', type: mavlink.messages.setpoint_8dof, order_map: [8, 0, 1, 2, 3, 4, 5, 6, 7], crc_extra: 241 },
        149: { format: '<ffffffB', type: mavlink.messages.setpoint_6dof, order_map: [6, 0, 1, 2, 3, 4, 5], crc_extra: 15 },
        249: { format: '<HBB32s', type: mavlink.messages.memory_vect, order_map: [0, 1, 2, 3], crc_extra: 204 },
        250: { format: '<dfff10s', type: mavlink.messages.debug_vect, order_map: [4, 0, 1, 2, 3], crc_extra: 49 },
        251: { format: '<If10s', type: mavlink.messages.named_value_float, order_map: [0, 2, 1], crc_extra: 170 },
        252: { format: '<Ii10s', type: mavlink.messages.named_value_int, order_map: [0, 2, 1], crc_extra: 44 },
        253: { format: '<B50s', type: mavlink.messages.statustext, order_map: [0, 1], crc_extra: 83 },
        254: { format: '<IfB', type: mavlink.messages.debug, order_map: [0, 2, 1], crc_extra: 46 },
}


// Special mavlink message to capture malformed data packets for debugging
mavlink.messages.bad_data = function(data, reason) {
    this.id = mavlink.MAVLINK_MSG_ID_BAD_DATA;
    this.data = data;
    this.reason = reason;
}

/* MAVLink protocol handling class */
MAVLink = function(logger, srcSystem, srcComponent) {

    this.logger = logger;

    this.seq = 0;
    this.buf = new Buffer(0);
   
    this.srcSystem = (typeof srcSystem === 'undefined') ? 0 : srcSystem;
    this.srcComponent =  (typeof srcComponent === 'undefined') ? 0 : srcComponent;

    // The first packet we expect is a valid header, 6 bytes.
    this.expected_length = 6;

    this.have_prefix_error = false;

    this.protocol_marker = 254;
    this.little_endian = true;

    this.crc_extra = true;
    this.sort_fields = true;
    this.total_packets_sent = 0;
    this.total_bytes_sent = 0;
    this.total_packets_received = 0;
    this.total_bytes_received = 0;
    this.total_receive_errors = 0;
    this.startup_time = Date.now();
    
}

// Implements EventEmitter
util.inherits(MAVLink, events.EventEmitter);

// If the logger exists, this function will add a message to it.
// Assumes the logger is a winston object.
MAVLink.prototype.log = function(message) {
    if(this.logger) {
        this.logger.info(message);
    }
}

MAVLink.prototype.send = function(mavmsg) {
        buf = mavmsg.pack(this);
        this.file.write(buf);
        this.seq = (this.seq + 1) % 255;
        this.total_packets_sent +=1;
        this.total_bytes_sent += buf.length;
}

// return number of bytes needed for next parsing stage
MAVLink.prototype.bytes_needed = function() {
    ret = this.expected_length - this.buf.length;
    return ( ret <= 0 ) ? 1 : ret;
}

// add data to the local buffer
MAVLink.prototype.pushBuffer = function(data) {
    if(data) {
        this.buf = Buffer.concat([this.buf, data]);
        this.total_bytes_received += data.length;
    }
}

// Decode prefix.  Elides the prefix.
MAVLink.prototype.parsePrefix = function() {

    // Test for a message prefix.
    if( this.buf.length >= 1 && this.buf[0] != 254 ) {

        // Strip the offending initial byte and throw an error.
        var badPrefix = this.buf[0];
        this.buf = this.buf.slice(1);
        this.expected_length = 6;
        this.total_receive_errors +=1;
        throw new Error("Bad prefix ("+badPrefix+")");

    }

}

// Determine the length.  Leaves buffer untouched.
MAVLink.prototype.parseLength = function() {
    
    if( this.buf.length >= 3 ) {
        var unpacked = jspack.Unpack('BB', this.buf.slice(1, 3));
        this.expected_length = unpacked[0] + 8; // length of message + header + CRC
    }

}

// input some data bytes, possibly returning a new message
MAVLink.prototype.parseChar = function(c) {

    var m;
    try {

        this.pushBuffer(c);
        this.parsePrefix();
        this.parseLength();
        m = this.parsePayload();

    } catch(e) {

       // w.info("Got a bad data message ("+e.message+")");
        this.total_receive_errors += 1;
        m = new mavlink.messages.bad_data(this.buf, e.message);
        
    }

    return m;

}

MAVLink.prototype.parsePayload = function() {

    // If we have enough bytes to try and read it, read it.
    if( this.expected_length >= 8 && this.buf.length >= this.expected_length ) {

        // Slice off the expected packet length, reset expectation to be to find a header.
        var mbuf = this.buf.slice(0, this.expected_length);

        // w.info("Attempting to parse packet, message candidate buffer is ["+mbuf.toByteArray()+"]");

        try {

            var m = this.decode(mbuf);
            this.total_packets_received += 1;
            this.buf = this.buf.slice(this.expected_length);
            this.expected_length = 6;
            this.emit(m.name, m);
            this.emit('message', m);
            return m;

        } catch(e) {

            // In this case, we thought we'd have a valid packet, but
            // didn't.  It could be that the packet was structurally present
            // but malformed, or, it could be that random line noise
            // made this look like a packet.  Consume the first symbol in the buffer and continue parsing.
            this.buf = this.buf.slice(1);
            this.expected_length = 6;
            
            // Log.
            //w.info(e);

            // bubble
            throw e;
        }
    }
    return null;

}

// input some data bytes, possibly returning an array of new messages
MAVLink.prototype.parseBuffer = function(s) {
    
    // Get a message, if one is available in the stream.
    var m = this.parseChar(s);

    // No messages available, bail.
    if ( null === m ) {
        return null;
    }
    
    // While more valid messages can be read from the existing buffer, add
    // them to the array of new messages and return them.
    var ret = [m];
    while(true) {
        m = this.parseChar();
        if ( null === m ) {
            // No more messages left.
            return ret;
        }
        ret.push(m);
    }
    return ret;

}

/* decode a buffer as a MAVLink message */
MAVLink.prototype.decode = function(msgbuf) {

    var magic, mlen, seq, srcSystem, srcComponent, unpacked, msgId;

    // decode the header
    try {
        unpacked = jspack.Unpack('cBBBBB', msgbuf.slice(0, 6));
        magic = unpacked[0];
        mlen = unpacked[1];
        seq = unpacked[2];
        srcSystem = unpacked[3];
        srcComponent = unpacked[4];
        msgId = unpacked[5];
    }
    catch(e) {
        throw new Error('Unable to unpack MAVLink header: ' + e.message);
    }

    if (magic.charCodeAt(0) != 254) {
        throw new Error("Invalid MAVLink prefix ("+magic.charCodeAt(0)+")");
    }

    if( mlen != msgbuf.length - 8 ) {
        throw new Error("Invalid MAVLink message length.  Got " + (msgbuf.length - 8) + " expected " + mlen + ", msgId=" + msgId);
    }

    if( false === _.has(mavlink.map, msgId) ) {
        throw new Error("Unknown MAVLink message ID (" + msgId + ")");
    }

    // decode the payload
    // refs: (fmt, type, order_map, crc_extra) = mavlink.map[msgId]
    var decoder = mavlink.map[msgId];

    // decode the checksum
    try {
        var receivedChecksum = jspack.Unpack('<H', msgbuf.slice(msgbuf.length - 2));
    } catch (e) {
        throw new Error("Unable to unpack MAVLink CRC: " + e.message);
    }

    var messageChecksum = mavutil.x25Crc(msgbuf.slice(1, msgbuf.length - 2));

    // Assuming using crc_extra = True.  See the message.prototype.pack() function.
    messageChecksum = mavutil.x25Crc([decoder.crc_extra], messageChecksum);
    
    if ( receivedChecksum != messageChecksum ) {
        throw new Error('invalid MAVLink CRC in msgID ' +msgId+ ', got 0x' + receivedChecksum + ' checksum, calculated payload checkum as 0x'+messageChecksum );
    }

    // Decode the payload and reorder the fields to match the order map.
    try {
        var t = jspack.Unpack(decoder.format, msgbuf.slice(6, msgbuf.length));
    }
    catch (e) {
        throw new Error('Unable to unpack MAVLink payload type='+decoder.type+' format='+decoder.format+' payloadLength='+ msgbuf.slice(6, -2).length +': '+ e.message);
    }

    // Reorder the fields to match the order map
    var args = [];
    _.each(t, function(e, i, l) {
        args[i] = t[decoder.order_map[i]]
    });

    // construct the message object
    try {
        var m = new decoder.type(args);
        m.set.call(m, args);
    }
    catch (e) {
        throw new Error('Unable to instantiate MAVLink message of type '+decoder.type+' : ' + e.message);
    }
    m.msgbuf = msgbuf;
    m.payload = msgbuf.slice(6);
    m.crc = receivedChecksum;
    m.header = new mavlink.header(msgId, mlen, seq, srcSystem, srcComponent);
    this.log(m);
    return m;
}

// Expose this code as a module
module.exports = mavlink;

